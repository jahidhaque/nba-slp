"use strict";!function(){angular.module("nbaslp",["ngResource","ngRoute"]).config(["$routeProvider","$locationProvider",function(e,l){e.when("/",{templateUrl:"home/welcome/welcome.view.html",controller:"welcomeCtrl",controllerAs:"wvm"}).when("/signup",{templateUrl:"signup/signup.view.html",controller:"signupCtrl",controllerAs:"regvm"}).when("/signin",{templateUrl:"signin/signin.view.html",controller:"signinCtrl",controllerAs:"lvm"}),l.html5Mode({enabled:!0})}])}();
"use strict";function authentication(n,t){var e=function(t){n.localStorage.nbaslp=t},i=function(){return n.localStorage.nbaslp},o=function(){var t=i(),e=void 0;return!!t&&(e=t.split(".")[1],e=n.atob(e),e=JSON.parse(e))};return{currentUser:function(){if(o){var t=i().split(".")[1];return t=n.atob(t),t=JSON.parse(t),{userId:t._id,email:t.email,name:t.name}}return!1},saveToken:e,getToken:i,isLoggedIn:o,signUp:function(n){return t.post("/api/register",n).success(function(n){e(n.token)})},signIn:function(n){return t.post("/api/login",n).success(function(n){e(n.token)})},Logout:function(){n.localStorage.removeItem("nbaslp")}}}angular.module("nbaslp").service("authentication",authentication),authentication.$inject=["$window","$http"];
"use strict";!function(){angular.module("nbaslp").directive("siteNav",function(){return{restrict:"EA",templateUrl:"common/directives/nav/site-nav.template.html",controller:"navCtrl as nvm"}})}();
"use strict";!function(){angular.module("nbaslp").controller("navCtrl",function(){})}();
"use strict";!function(){angular.module("nbaslp").directive("siteFooter",function(){return{restrict:"EA",templateUrl:"common/directives/footer/footer.template.html"}})}();
"use strict";!function(){angular.module("nbaslp").controller("welcomeCtrl",function(){})}();
"use strict";!function(){function t(){this.user={firstName:"",lastName:"",displayName:"",email:"",password:"",confirmPassword:""},this.register=function(){}}angular.module("nbaslp").controller("signupCtrl",t),t.$inject=["authentication"]}();
"use strict";!function(){angular.module("nbaslp").controller("signinCtrl",function(){})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
