"use strict";!function(){angular.module("nbaslp",["ngResource","ngRoute"]).config(["$routeProvider","$locationProvider",function(l,e){l.when("/",{templateUrl:"home/welcome/welcome.view.html",controller:"welcomeCtrl",controllerAs:"wvm"}).when("/signup",{templateUrl:"signup/signup.view.html",controller:"signupCtrl",controllerAs:"regvm"}).when("/signin",{templateUrl:"signin/signin.view.html",controller:"signinCtrl",controllerAs:"lvm"}).when("/profile",{templateUrl:"profile/profile.view.html",controller:"profileCtrl",controllerAs:"provm"}).when("/help",{templateUrl:"help/help.view.html",controller:"helpCtrl",controllerAs:"hvm"}).when("/sitecontroll",{templateUrl:"admin/sitecontroll/sitecontroll.view.html",controller:"sitecontrollCtrl",controllerAs:"adSite"}).when("/welcome",{templateUrl:"welcome/welcome.view.html",controller:"welcomeCtrl",controllerAs:"wvm"}),e.html5Mode({enabled:!0})}])}();
"use strict";function authentication(n,t){var e=function(t){n.localStorage.nbaslp=t},a=function(){return n.localStorage.nbaslp},o=function(){var t=a(),e=void 0;return!!t&&(e=t.split(".")[1],e=n.atob(e),e=JSON.parse(e))};return{currentUser:function(){if(o){var t=a().split(".")[1];return t=n.atob(t),t=JSON.parse(t),{userId:t._id,email:t.email,accountStatus:t.accountStatus,accountType:t.accountType,accountId:t.userId,name:t.name}}return!1},saveToken:e,getToken:a,isLoggedIn:o,signUp:function(n){return t.post("/api/signup",n).success(function(n){e(n.token)})},signIn:function(n){return t.post("/api/signin",n).success(function(n){e(n.token)})},Logout:function(){n.localStorage.removeItem("nbaslp")}}}angular.module("nbaslp").service("authentication",authentication),authentication.$inject=["$window","$http"];
"use strict";!function(){function t(t,n){var e=function(t){return t},c=function(t){return t};return{getAccountStatuses:function(t){return n.get("/api/"+t+"/statuses").then(e).catch(c)},updateUserStatus:function(t){return n.post("/api/userstatus",t).then(e).catch(c)},saveBasicInfo:function(t){return n.post("/api/createbasicprofile",t).then(e).catch(c)},saveBranchInfo:function(t,a){return n.post("/api/"+t+"/savebranchinfo",a).then(e).catch(c)}}}angular.module("nbaslp").service("account",t),t.$inject=["$window","$http"]}();
"use strict";!function(){function t(t){var e=function(t){return t},n=function(t){return t};return{addPreferredCommittee:function(r){return t.post("/api/createcommittee",r).then(e).catch(n)}}}angular.module("nbaslp").service("sitecontroller",t),t.$inject=["$http"]}();
"use strict";!function(){angular.module("nbaslp").directive("siteNav",function(){return{restrict:"EA",templateUrl:"common/directives/nav/site-nav.template.html",controller:"navCtrl as nvm"}})}();
"use strict";!function(){function n(n,t){n.isLoggedIn()?(this.loggedInUri=!0,this.loggedInName=n.currentUser().name,this.currentAccountType=n.currentUser().accountType,console.log(this.currentAccountType)):this.loggedInUri=!1,this.logout=function(){n.Logout(),t.path("/signin")}}angular.module("nbaslp").controller("navCtrl",n),n.$inject=["authentication","$location"]}();
"use strict";!function(){angular.module("nbaslp").directive("siteFooter",function(){return{restrict:"EA",templateUrl:"common/directives/footer/footer.template.html"}})}();
"use strict";!function(){angular.module("nbaslp").controller("welcomeCtrl",function(){})}();
"use strict";!function(){function r(r,t){var o=this;o.user={firstName:"",lastName:"",displayName:"",email:"",password:"",confirmPassword:""},o.register=function(){r.signUp(o.user).then(function(r){r.data.error?(o.RegistrationError=!0,o.RegistrationErrorMsg=r.data.error):(o.RegistrationError=!1,t.path("/welcome"))}).catch(function(r){r&&(o.RegistrationError=!0,o.RegistrationErrorMsg=r.data.error)})},r.isLoggedIn()&&t.path("/welcome")}angular.module("nbaslp").controller("signupCtrl",r),r.$inject=["authentication","$location"]}();
"use strict";!function(){function r(r,o){var n=this;n.user={email:"",password:""},r.isLoggedIn()?o.path("/welcome"):(n.login=function(){n.user.email&&n.user.password?(n.loginError=!1,n.doLogin()):(n.loginError=!0,n.loginErrorMsg="Error! all * fields are required")},n.doLogin=function(){r.signIn(n.user).error(function(r){n.loginError=!0,n.loginErrorMsg=r.error}).then(function(){o.path("/welcome")})})}angular.module("nbaslp").controller("signinCtrl",r),r.$inject=["authentication","$location"]}();
"use strict";!function(){function r(r,t,a,n){var c=this;r.isLoggedIn()?(c.profileStatus=r.currentUser().accountStatus,c.currentAccountType=r.currentUser().accountType,"customer"===r.currentUser().accountType?(c.getProfileStatuses=function(){a.getAccountStatuses(r.currentUser().email).then(function(r){r.data.error?(c.statusLoadError=!0,c.statusLoadErrorMsg=r.data.error):(c.statusLoadError=!1,c.userStatuses=r.data.statuses)}).catch(function(r){c.statusLoadError=!0,c.statusLoadErrorMsg=r})},c.basicProfile={whos:r.currentUser().email,userId:r.currentUser().userId,formerName:"",sex:"",tele:"",address:""},c.saveBasicInfo=function(){a.saveBasicInfo(c.basicProfile).then(function(t){if(t.data.error)c.basicAccountInfoError=!0,c.basicAccountInfoErrorMsg=t.data.error;else{var e={update_at:"basic_info",email:r.currentUser().email,status:!0};a.updateUserStatus(e).then(function(r){!0===r.data.updated?(c.statusUpdateError=!1,n.reload()):(c.basicAccountInfoError=!0,c.basicAccountInfoErrorMsg=r.data.error)}).catch(function(r){c.statusUpdateError=!0,c.basicAccountInfoErrorMsg=r})}}).catch(function(r){})},c.branch={year:"",branch:""},c.saveBatchInfo=function(){a.saveBranchInfo(r.currentUser().email,c.branch).then(function(r){r.data.error?(c.branchInfoError=!0,c.branchInfoErrorMsg=r.data.error):r.data.success&&(c.branchInfoError=!1,c.branchSuccess="Branch information hase been successfully added")}).catch(function(r){c.branchInfoError=!0,c.branchInfoErrorMsg=r})}):r.currentUser().accountType):t.path("/signin")}angular.module("nbaslp").controller("profileCtrl",r),r.$inject=["authentication","$location","account","$route"]}();
"use strict";!function(){function n(n,t){}angular.module("nbaslp").controller("welcomeCtrl",n),n.$inject=["authentication","$location"]}();
"use strict";!function(){function t(t,e,n){var o=this;t.isLoggedIn()?"admin"===t.currentUser().accountType?(o.committee={name:""},o.addPreferredCommittee=function(){n.addPreferredCommittee(o.committee).then(function(t){}).catch(function(t){})}):e.path("/welcome"):e.path("/signin")}angular.module("nbaslp").controller("sitecontrollCtrl",t),t.$inject=["authentication","$location","sitecontroller"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
