"use strict";!function(){angular.module("nbaslp",["ngResource","ngRoute","720kb.datepicker"]).config(["$routeProvider","$locationProvider",function(l,e){l.when("/",{templateUrl:"home/welcome/welcome.view.html",controller:"welcomeCtrl",controllerAs:"wvm"}).when("/councilmembers",{templateUrl:"councilmembers/councilmembers.view.html",controller:"councilCtrl",controllerAs:"clvm"}).when("/signup",{templateUrl:"signup/signup.view.html",controller:"signupCtrl",controllerAs:"regvm"}).when("/signin",{templateUrl:"signin/signin.view.html",controller:"signinCtrl",controllerAs:"lvm"}).when("/profile",{templateUrl:"profile/profile.view.html",controller:"profileCtrl",controllerAs:"provm"}).when("/help",{templateUrl:"help/help.view.html",controller:"helpCtrl",controllerAs:"hvm"}).when("/sitecontroll",{templateUrl:"admin/sitecontroll/sitecontroll.view.html",controller:"sitecontrollCtrl",controllerAs:"adSite"}).when("/usercontroll",{templateUrl:"admin/usercontroll/usercontroll.view.html",controller:"usercontrollCtrl",controllerAs:"uservm"}).when("/staffcontroll",{templateUrl:"admin/staffcontroll/staffcontroll.view.html",controller:"staffCtrl",controllerAs:"svm"}).when("/welcome",{templateUrl:"welcome/welcome.view.html",controller:"welcomeCtrl",controllerAs:"wvm"}).when("/committees",{templateUrl:"committees/committees.view.html",controller:"committeesCtrl",controllerAs:"cvm"}).when("/events",{templateUrl:"events/events.view.html",controller:"eventsCtrl",controllerAs:"evm"}).when("/aboutus",{templateUrl:"aboutus/aboutus.view.html",controller:"aboutusCtrl",controllerAs:"abvm"}).when("/contactus",{templateUrl:"contactus/contactus.view.html",controller:"contactusCtrl",controllerAs:"cvm"}),e.html5Mode({enabled:!0})}])}();
"use strict";function authentication(n,t){var e=function(t){n.localStorage.nbaslp=t},a=function(){return n.localStorage.nbaslp},o=function(){var t=a(),e=void 0;return!!t&&(e=t.split(".")[1],e=n.atob(e),e=JSON.parse(e))};return{currentUser:function(){if(o){var t=a().split(".")[1];return t=n.atob(t),t=JSON.parse(t),{userId:t._id,email:t.email,accountStatus:t.accountStatus,accountType:t.accountType,accountId:t.userId,name:t.name}}return!1},saveToken:e,getToken:a,isLoggedIn:o,signUp:function(n){return t.post("/api/signup",n).success(function(n){e(n.token)})},signIn:function(n){return t.post("/api/signin",n).success(function(n){e(n.token)})},Logout:function(){n.localStorage.removeItem("nbaslp")}}}angular.module("nbaslp").service("authentication",authentication),authentication.$inject=["$window","$http"];
"use strict";!function(){function t(t,e){var n=function(t){return t},a=function(t){return t};return{resetPassword:function(t,c){return e.post("/api/"+t+"/resetpassword",c).then(n).catch(a)},uploadTellerDocs:function(t,c){var r=new FormData;return r.append("tellerDoc",t),e.post("/api/docupload/"+c,r,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(n).catch(a)},createActivationCode:function(t){return e.post("/api/"+t+"/generatevalidationcode").then(n).catch(a)},validateActivationCode:function(t,c){return e.post("/api/"+t+"/"+c+"/validate").then(n).catch(a)},getAccountStatuses:function(t){return e.get("/api/"+t+"/statuses").then(n).catch(a)},updateUserStatus:function(t){return e.post("/api/userstatus",t).then(n).catch(a)},saveBasicInfo:function(t){return e.post("/api/createbasicprofile",t).then(n).catch(a)},saveBranchInfo:function(t,c){return e.post("/api/"+t+"/savebranchinfo",c).then(n).catch(a)},loadUserInfo:function(t,c){return e.get("/api/"+c+"/"+t+"/userinfo").then(n).catch(a)},getCommittee:function(){return e.get("/api/showcommittee").then(n).catch(a)},saveBankTeller:function(t){return e.post("/api/savebankteller",t).then(n).catch(a)},getBankTeller:function(t){return e.get("/api/"+t+"/bankteller").then(n).catch(a)}}}angular.module("nbaslp").service("account",t),t.$inject=["$window","$http"]}();
"use strict";!function(){function t(t){var e=function(t){return t},n=function(t){return t};return{addPreferredCommittee:function(c){return t.post("/api/createcommittee",c).then(e).catch(n)},showAllCommittee:function(){return t.get("/api/showcommittee").then(e).catch(n)},removeCommittee:function(c){return t.delete("/api/"+c+"/removecommittee").then(e).catch(n)},addCouncil:function(c){return t.post("/api/councilmember",c).then(e).catch(n)},showCouncilMember:function(){return t.get("/api/showcouncil").then(e).catch(n)},removeCouncil:function(c){return t.delete("/api/"+c+"/council").then(e).catch(n)},addEvent:function(c){return t.post("/api/event",c).then(e).catch(n)},showEvent:function(){return t.get("/api/showEvent").then(e).catch(n)},removeEvent:function(c){return t.delete("/api/"+c+"/event").then(e).catch(n)}}}angular.module("nbaslp").service("sitecontroller",t),t.$inject=["$http"]}();
"use strict";!function(){function e(e){var n=function(e){return e},t=function(e){return e};return{showMembers:function(){return e.get("/api/members").then(n).catch(t)},showSingleMember:function(r){return e.get("/api/"+r+"/member").then(n).catch(t)},showMemberProfile:function(r){return e.get("/api/"+r+"/profile").then(n).catch(t)},showMemberBranch:function(r){return e.get("/api/"+r+"/branch").then(n).catch(t)}}}angular.module("nbaslp").service("usercontroller",e),e.$inject=["$http"]}();
"use strict";!function(){function r(r,e,o){var n=this;r.showMembers().then(function(r){r.data.error?(n.showMemberError=!0,n.showMemberErrorMsg=r.data.error):n.members=r.data.members}).catch(function(r){n.showMemberError=!0,n.showMemberErrorMsg=r}),n.checkRoutes=function(){o.v?n.clickedMemberName=!0:n.clickedMemberName=!1},n.loadUserInfo=function(){var e=o.v;r.showSingleMember(e).then(function(r){r.data.error?(n.singleMemberLoadingError=!0,n.singleMemberLoadingErrorMsg=r.data.error):(n.singleMemberLoadingError=!1,n.singleMember=r.data.member)}).catch(function(r){n.singleMemberLoadingError=!0,n.singleMemberLoadingErrorMsg=r})},n.loadUserProfile=function(){var e=o.v;r.showMemberProfile(e).then(function(r){r.data.error?(n.profileLoadingError=!0,n.profileLoadingErrorMsg=r.data.error):(n.profileLoadingError=!1,n.memberProfile=r.data.profile)}).catch(function(r){n.profileLoadingError=!0,n.profileLoadingErrorMsg=r})},n.loadUserBranch=function(){var e=o.v;r.showMemberBranch(e).then(function(r){r.data.error?(n.branchLoadingError=!0,n.branchLoadingErrorMsg=r.data.error):(n.branchLoadingError=!1,n.memberBranch=r.data.branch)}).catch(function(r){n.branchLoadingError=!0,n.branchLoadingErrorMsg=r})},n.loadBankTeller=function(){var r=o.v;e.getBankTeller(r).then(function(r){r.data.error?(n.bankTellerLoadingError=!0,n.bankTellerLoadingErrorMsg=r.data.error):(n.bankTellerLoadingError=!1,n.memberbankTeller=r.data.bankTeller)}).catch(function(r){n.bankTellerLoadingError=!0,n.bankTellerLoadingErrorMsg=r})}}angular.module("nbaslp").controller("usercontrollCtrl",r),r.$inject=["usercontroller","account","$routeParams"]}();
"use strict";!function(){function n(n,t){n.isLoggedIn()?"admin"===n.currentUser().accountType||t.path("/welcome"):t.path("/signin")}angular.module("nbaslp").controller("staffCtrl",n),n.$inject=["authentication","$location"]}();
"use strict";!function(){function n(n){var t=function(n){return n},e=function(n){return n};return{sendContactMessage:function(r){return n.post("/api/sendmessage",r).then(t).catch(e)}}}angular.module("nbaslp").service("systemService",n),n.$inject=["$http"]}();
"use strict";!function(){angular.module("nbaslp").directive("siteNav",function(){return{restrict:"EA",templateUrl:"common/directives/nav/site-nav.template.html",controller:"navCtrl as nvm"}})}();
"use strict";!function(){function n(n,t){n.isLoggedIn()?(this.loggedInUri=!0,this.loggedInName=n.currentUser().name,this.currentAccountType=n.currentUser().accountType):this.loggedInUri=!1,this.logout=function(){n.Logout(),t.path("/signin")}}angular.module("nbaslp").controller("navCtrl",n),n.$inject=["authentication","$location"]}();
"use strict";!function(){angular.module("nbaslp").directive("siteFooter",function(){return{restrict:"EA",templateUrl:"common/directives/footer/footer.template.html"}})}();
"use strict";!function(){function n(n){return{restrict:"A",link:function(i,e,t){var c=n(t.fileModel).assign;e.on("change",function(){i.$apply(function(){c(i,e[0].files[0])})})}}}angular.module("nbaslp").directive("fileModel",n),n.$inject=["$parse"]}();
"use strict";!function(){angular.module("nbaslp").directive("sideBar",function(){return{restrict:"EA",templateUrl:"common/directives/sidebar/sidebar.template.html"}})}();
"use strict";!function(){angular.module("nbaslp").controller("welcomeCtrl",function(){})}();
"use strict";!function(){function t(t){var o=this;o.loadCommittee=function(){t.showAllCommittee().then(function(t){t.data.error?(o.committeeLoadingError=!0,o.committeeLoadingErrorMsg=t.data.error):(o.committeeLoadingError=!1,o.committees=t.data.committee)}).catch(function(t){o.committeeLoadingError=!0,o.committeeLoadingErrorMsg=t})}}angular.module("nbaslp").controller("committeesCtrl",t),t.$inject=["sitecontroller"]}();
"use strict";!function(){function o(o){var r=this;r.loadCouncilMembers=function(){o.showCouncilMember().then(function(o){console.log(o),o.data.error?(r.committeeLoadingError=!0,r.committeeLoadingErrorMsg=o.data.error):(r.committeeLoadingError=!1,r.councils=o.data.data)}).catch(function(o){r.committeeLoadingError=!0,r.committeeLoadingErrorMsg=o})}}angular.module("nbaslp").controller("councilCtrl",o),o.$inject=["sitecontroller"]}();
"use strict";!function(){function e(e){var n=this;n.showEvents=function(){e.showEvent().then(function(e){e.data.error?(n.eventLoadError=!0,n.eventLoadErrorMsg=e.data.error):(n.eventLoadError=!1,n.events=e.data.events,n.events.length>0?n.noEvent=!1:n.noEvent=!0)}).catch(function(e){n.eventLoadError=!0,n.eventLoadErrorMsg=e})}}angular.module("nbaslp").controller("eventsCtrl",e),e.$inject=["sitecontroller"]}();
"use strict";!function(){angular.module("nbaslp").controller("aboutusCtrl",function(){})}();
"use strict";!function(){function e(e){var s=this;s.contact={name:"",email:"",message:""},s.contactUs=function(){e.sendContactMessage(s.contact).then(function(e){e.data.error?(s.sendMessageError=!0,s.sendMessageErrorMsg=e.data.error):(s.sendMessageSuccess=!0,s.sendMessageSuccessMsg="We have received your message. We will be in touch with you soon")}).catch(function(e){s.sendMessageError=!0,s.sendMessageErrorMsg=e})}}angular.module("nbaslp").controller("contactusCtrl",e),e.$inject=["systemService"]}();
"use strict";!function(){function r(r,t){var o=this;o.user={firstName:"",lastName:"",displayName:"",email:"",password:"",confirmPassword:""},o.register=function(){r.signUp(o.user).then(function(r){r.data.error?(o.RegistrationError=!0,o.RegistrationErrorMsg=r.data.error):(o.RegistrationError=!1,t.path("/welcome"))}).catch(function(r){r&&(o.RegistrationError=!0,o.RegistrationErrorMsg=r.data.error)})},r.isLoggedIn()&&t.path("/welcome")}angular.module("nbaslp").controller("signupCtrl",r),r.$inject=["authentication","$location"]}();
"use strict";!function(){function r(r,o){var n=this;n.user={email:"",password:""},r.isLoggedIn()?o.path("/welcome"):(n.login=function(){n.user.email&&n.user.password?(n.loginError=!1,n.doLogin()):(n.loginError=!0,n.loginErrorMsg="Error! all * fields are required")},n.doLogin=function(){r.signIn(n.user).error(function(r){n.loginError=!0,n.loginErrorMsg=r.error}).then(function(){o.path("/welcome")})})}angular.module("nbaslp").controller("signinCtrl",r),r.$inject=["authentication","$location"]}();
"use strict";!function(){function r(r,e,o,a,t){function n(r){a.updateUserStatus(r).then(function(r){!0===r.data.updated?(c.statusUpdateError=!1,t.reload()):(c.basicAccountInfoError=!0,c.basicAccountInfoErrorMsg=r.data.error)}).catch(function(r){c.statusUpdateError=!0,c.basicAccountInfoErrorMsg=r})}var c=this;c.resetpassword={password:"",repeat_password:"",new_password:""},c.resetPassword=function(){a.resetPassword(e.currentUser().email,c.resetpassword).then(function(r){r.data.error?(c.resetPasswordError=!0,c.resetPasswordErrorMsg=r.data.error):(c.resetPasswordError=!1,c.resetSuccess=!0,setTimeout(function(){e.Logout(),t.reload()},200))}).catch(function(r){c.resetPasswordError=!0,c.resetPasswordErrorMsg=r})},e.isLoggedIn()?(c.currentAccountType=e.currentUser().accountType,"customer"===e.currentUser().accountType?(c.profileStatus=e.currentUser().accountStatus,c.codeReady=!1,c.sendActivationCode=function(){c.codeReady=!0,a.createActivationCode(e.currentUser().email).then(function(r){if(r.data.error)c.activationCodeError=!0,c.activationCodeErrorMsg=r.data.error;else{n({update_at:"profileActivationMail",email:e.currentUser().email,status:!0}),c.codeReady=!1,c.activationCodeError=!1}}).catch(function(r){c.activationCodeError=!0,c.activationCodeErrorMsg=r})},c.getProfileStatuses=function(){a.getAccountStatuses(e.currentUser().email).then(function(r){r.data.error?(c.statusLoadError=!0,c.statusLoadErrorMsg=r.data.error):(c.statusLoadError=!1,c.userStatuses=r.data.statuses)}).catch(function(r){c.statusLoadError=!0,c.statusLoadErrorMsg=r})},c.basicProfile={whos:e.currentUser().email,userId:e.currentUser().userId,formerName:"",sex:"",tele:"",address:""},c.saveBasicInfo=function(){a.saveBasicInfo(c.basicProfile).then(function(r){if(r.data.error)c.basicAccountInfoError=!0,c.basicAccountInfoErrorMsg=r.data.error;else{var o={update_at:"basic_info",email:e.currentUser().email,status:!0};a.updateUserStatus(o).then(function(r){!0===r.data.updated?(c.statusUpdateError=!1,t.reload()):(c.basicAccountInfoError=!0,c.basicAccountInfoErrorMsg=r.data.error)}).catch(function(r){c.statusUpdateError=!0,c.basicAccountInfoErrorMsg=r})}}).catch(function(r){})},c.branch={year:"",branch:""},c.saveBatchInfo=function(){a.saveBranchInfo(e.currentUser().email,c.branch).then(function(r){if(r.data.error)c.branchInfoError=!0,c.branchInfoErrorMsg=r.data.error;else if(r.data.success){c.branchInfoError=!1;var o={update_at:"branch",email:e.currentUser().email,status:!0};a.updateUserStatus(o).then(function(r){!0===r.data.updated?(c.branchInfoError=!1,t.reload()):(c.branchInfoError=!0,c.branchInfoErrorMsg=r.data.error)}).catch(function(r){c.branchInfoError=!0,c.branchInfoErrorMsg=r})}}).catch(function(r){c.branchInfoError=!0,c.branchInfoErrorMsg=r})},c.loadBasicInfo=function(r){a.loadUserInfo(r,e.currentUser().email).then(function(r){r.data.error?(c.userBasicInfoLoadingError=!0,c.userBasicInfoLoadingErrorMsg=r.data.error):(c.userBasicInfoLoadingError=!1,c.basicInfo=r.data.userInfo)}).catch(function(r){c.userBasicInfoLoadingError=!0,c.userBasicInfoLoadingErrorMsg=r})},c.getCommittee=function(){a.getCommittee().then(function(r){c.committees=r.data.committee}).catch(function(r){console.log(r)})},c.loadUserBranch=function(r){a.loadUserInfo(r,e.currentUser().email).then(function(r){r.data.error?(c.userInfoLoadingError=!0,c.userInfoLoadingErrorMsg=r.data.error):(c.userInfoLoadingError=!1,c.branchInfo=r.data.userInfo)}).catch(function(r){c.userInfoLoadingError=!0,c.userInfoLoadingErrorMsg=r})},c.activation={code:""},c.activeProfile=function(){a.validateActivationCode(e.currentUser().email,c.activation.code).then(function(r){r.data.error?(c.ActivationError=!0,c.ActivationErrorMsg=r.data.error):r.data.success&&(c.activationSuccess=!0,setTimeout(function(){e.Logout(),t.reload()},3e3))}).catch(function(r){c.ActivationError=!0,c.ActivationErrorMsg=r})},c.bankTellerInfo={preferredCommittee:"",additional_committee:"",whos:e.currentUser().email,userId:e.currentUser().accountId,tellerDoc:r.tellerDoc},c.saveBankTellerInfo=function(){c.bankTellerInfo.preferredCommittee&&c.bankTellerInfo.additional_committee?(console.log(c.bankTellerInfo),a.uploadTellerDocs(r.tellerDoc,e.currentUser().accountId).then(function(r){!1===r.data.success?(c.saveTellerError=!0,c.saveTellerErrorMsg=r.data.error):!0===r.data.success&&(c.bankTellerInfo.tellerDoc=r.data.docLocation,a.saveBankTeller(c.bankTellerInfo).then(function(r){if(r.data.error)c.saveTellerError=!0,c.saveTellerErrorMsg=r.data.error;else{n({update_at:"bankteller",email:e.currentUser().email,status:!0}),t.reload()}}).catch(function(r){c.saveTellerError=!0,c.saveTellerErrorMsg=r}))}).catch(function(r){c.saveTellerError=!0,c.saveTellerErrorMsg=r})):(c.saveTellerError=!0,c.saveTellerErrorMsg="All * fiends are required. Must not be empty")},c.getCurrentBankTeller=function(){a.getBankTeller(e.currentUser().email).then(function(r){r.data.error?(c.bankTellerLoadingError=!0,c.bankTellerLoadingErrorMsg=r.data.error):(c.bankTellerLoadingError=!1,c.userBankTeller=r.data.bankTeller)}).catch(function(r){c.bankTellerLoadingError=!0,c.bankTellerLoadingErrorMsg=r})}):e.currentUser().accountType):o.path("/signin")}angular.module("nbaslp").controller("profileCtrl",r),r.$inject=["$scope","authentication","$location","account","$route"]}();
"use strict";!function(){function n(n,t){n.isLoggedIn()?"admin"===n.currentUser().accountType&&t.path("/usercontroll"):t.path("/signin")}angular.module("nbaslp").controller("welcomeCtrl",n),n.$inject=["authentication","$location"]}();
"use strict";!function(){function t(t,o,e){var r=this;t.isLoggedIn()?"admin"===t.currentUser().accountType?(r.committee={name:""},r.addPreferredCommittee=function(){e.addPreferredCommittee(r.committee).then(function(t){t.data.error?(r.addCommitteeError=!0,r.addCommitteeErrorMsg=t.data.error):(r.addCommitteeError=!1,r.addCommitteeSuccessMsg="Committee successfully added",setTimeout(function(){r.showCommittee()},200))}).catch(function(t){r.addCommitteeError=!0,r.addCommitteeErrorMsg=t})},r.showCommittee=function(){e.showAllCommittee().then(function(t){t.data.error?(r.committeeError=!0,r.committeeErrorMsg=t.data.error):(r.committeeError=!1,r.committeeList=t.data.committee)}).catch(function(t){r.committeeError=!0,r.committeeErrorMsg=t})},r.removeList=function(t){e.removeCommittee(t).then(function(t){t.data.error?alert(t.data.error):setTimeout(function(){r.showCommittee()},100)}).catch(function(t){alert(t)})},r.council={name:""},r.addCouncilMember=function(){e.addCouncil(r.council).then(function(t){t.data.error?(r.councilAddError=!0,r.councilAddErrorMsg=t.data.error):(r.councilAddError=!1,setTimeout(function(){r.showCouncil()},100))}).catch(function(t){r.councilAddError=!0,r.councilAddErrorMsg=t})},r.showCouncil=function(){e.showCouncilMember().then(function(t){t.data.error?(r.councilShowError=!0,r.councilShowErrorMsg=t.data.error):(r.councilShowError=!1,r.councils=t.data.data)}).catch(function(t){r.councilShowError=!0,r.councilShowErrorMsg=t})},r.removeCouncil=function(t){e.removeCouncil(t).then(function(t){setTimeout(function(){r.showCouncil()},100)}).catch(function(t){alert(t)})},r.event={eventTitle:"",eventDetails:"",eventStarts:"",eventEnds:""},r.addEvent=function(){e.addEvent(r.event).then(function(t){t.data.error?(r.eventAddError=!0,r.eventAddErrorMsg=t.data.error):t.data.success&&(r.eventAddError=!1,r.eventAddSuccess=!0,setTimeout(function(){r.showEvent()},200))}).catch(function(t){r.eventAddError=!0,r.eventAddErrorMsg=t})},r.showEvent=function(){e.showEvent().then(function(t){t.data.error?(r.showEventError=!0,r.showEventErrorMsg=t.data.error):t.data.success&&(r.showEventError=!1,r.events=t.data.events)}).catch(function(t){r.showEventError=!0,r.showEventErrorMsg=t})},r.removeEvent=function(t){e.removeEvent(t).then(function(t){t.data.error?(r.showEventError=!0,r.showEventErrorMsg=t.data.error):t.data.success&&setTimeout(function(){r.showEvent()},100)}).catch(function(t){console.log(t)})}):o.path("/welcome"):o.path("/signin")}angular.module("nbaslp").controller("sitecontrollCtrl",t),t.$inject=["authentication","$location","sitecontroller"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
