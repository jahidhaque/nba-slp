"use strict";!function(){angular.module("nbaslp",["ngResource","ngRoute"]).config(["$routeProvider","$locationProvider",function(l,e){l.when("/",{templateUrl:"home/welcome/welcome.view.html",controller:"welcomeCtrl",controllerAs:"wvm"}).when("/signup",{templateUrl:"signup/signup.view.html",controller:"signupCtrl",controllerAs:"regvm"}).when("/signin",{templateUrl:"signin/signin.view.html",controller:"signinCtrl",controllerAs:"lvm"}).when("/profile",{templateUrl:"profile/profile.view.html",controller:"profileCtrl",controllerAs:"provm"}).when("/help",{templateUrl:"help/help.view.html",controller:"helpCtrl",controllerAs:"hvm"}).when("/sitecontroll",{templateUrl:"admin/sitecontroll/sitecontroll.view.html",controller:"sitecontrollCtrl",controllerAs:"adSite"}).when("/welcome",{templateUrl:"welcome/welcome.view.html",controller:"welcomeCtrl",controllerAs:"wvm"}),e.html5Mode({enabled:!0})}])}();
"use strict";function authentication(n,t){var e=function(t){n.localStorage.nbaslp=t},a=function(){return n.localStorage.nbaslp},o=function(){var t=a(),e=void 0;return!!t&&(e=t.split(".")[1],e=n.atob(e),e=JSON.parse(e))};return{currentUser:function(){if(o){var t=a().split(".")[1];return t=n.atob(t),t=JSON.parse(t),{userId:t._id,email:t.email,accountStatus:t.accountStatus,accountType:t.accountType,accountId:t.userId,name:t.name}}return!1},saveToken:e,getToken:a,isLoggedIn:o,signUp:function(n){return t.post("/api/signup",n).success(function(n){e(n.token)})},signIn:function(n){return t.post("/api/signin",n).success(function(n){e(n.token)})},Logout:function(){n.localStorage.removeItem("nbaslp")}}}angular.module("nbaslp").service("authentication",authentication),authentication.$inject=["$window","$http"];
"use strict";!function(){function t(t,e){var n=function(t){return t},a=function(t){return t};return{uploadTellerDocs:function(t,c){var o=new FormData;return o.append("tellerDoc",t),e.post("/api/docupload/"+c,o,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(n).catch(a)},createActivationCode:function(t){return e.post("/api/"+t+"/generatevalidationcode").then(n).catch(a)},validateActivationCode:function(t,c){return e.post("/api/"+t+"/"+c+"/validate").then(n).catch(a)},getAccountStatuses:function(t){return e.get("/api/"+t+"/statuses").then(n).catch(a)},updateUserStatus:function(t){return e.post("/api/userstatus",t).then(n).catch(a)},saveBasicInfo:function(t){return e.post("/api/createbasicprofile",t).then(n).catch(a)},saveBranchInfo:function(t,c){return e.post("/api/"+t+"/savebranchinfo",c).then(n).catch(a)},loadUserInfo:function(t,c){return e.get("/api/"+c+"/"+t+"/userinfo").then(n).catch(a)},getCommittee:function(){return e.get("/api/showcommittee").then(n).catch(a)},saveBankTeller:function(t){return e.post("/api/savebankteller",t).then(n).catch(a)}}}angular.module("nbaslp").service("account",t),t.$inject=["$window","$http"]}();
"use strict";!function(){function t(t){var e=function(t){return t},n=function(t){return t};return{addPreferredCommittee:function(r){return t.post("/api/createcommittee",r).then(e).catch(n)},showAllCommittee:function(){return t.get("/api/showcommittee").then(e).catch(n)},removeCommittee:function(r){return t.delete("/api/"+r+"/removecommittee").then(e).catch(n)}}}angular.module("nbaslp").service("sitecontroller",t),t.$inject=["$http"]}();
"use strict";!function(){angular.module("nbaslp").directive("siteNav",function(){return{restrict:"EA",templateUrl:"common/directives/nav/site-nav.template.html",controller:"navCtrl as nvm"}})}();
"use strict";!function(){function n(n,t){n.isLoggedIn()?(this.loggedInUri=!0,this.loggedInName=n.currentUser().name,this.currentAccountType=n.currentUser().accountType):this.loggedInUri=!1,this.logout=function(){n.Logout(),t.path("/signin")}}angular.module("nbaslp").controller("navCtrl",n),n.$inject=["authentication","$location"]}();
"use strict";!function(){angular.module("nbaslp").directive("siteFooter",function(){return{restrict:"EA",templateUrl:"common/directives/footer/footer.template.html"}})}();
"use strict";!function(){function n(n){return{restrict:"A",link:function(i,e,t){var c=n(t.fileModel).assign;e.on("change",function(){i.$apply(function(){c(i,e[0].files[0])})})}}}angular.module("nbaslp").directive("fileModel",n),n.$inject=["$parse"]}();
"use strict";!function(){angular.module("nbaslp").controller("welcomeCtrl",function(){})}();
"use strict";!function(){function r(r,t){var o=this;o.user={firstName:"",lastName:"",displayName:"",email:"",password:"",confirmPassword:""},o.register=function(){r.signUp(o.user).then(function(r){r.data.error?(o.RegistrationError=!0,o.RegistrationErrorMsg=r.data.error):(o.RegistrationError=!1,t.path("/welcome"))}).catch(function(r){r&&(o.RegistrationError=!0,o.RegistrationErrorMsg=r.data.error)})},r.isLoggedIn()&&t.path("/welcome")}angular.module("nbaslp").controller("signupCtrl",r),r.$inject=["authentication","$location"]}();
"use strict";!function(){function r(r,o){var n=this;n.user={email:"",password:""},r.isLoggedIn()?o.path("/welcome"):(n.login=function(){n.user.email&&n.user.password?(n.loginError=!1,n.doLogin()):(n.loginError=!0,n.loginErrorMsg="Error! all * fields are required")},n.doLogin=function(){r.signIn(n.user).error(function(r){n.loginError=!0,n.loginErrorMsg=r.error}).then(function(){o.path("/welcome")})})}angular.module("nbaslp").controller("signinCtrl",r),r.$inject=["authentication","$location"]}();
"use strict";!function(){function r(r,e,t,a,o){function n(r){a.updateUserStatus(r).then(function(r){!0===r.data.updated?(c.statusUpdateError=!1,o.reload()):(c.basicAccountInfoError=!0,c.basicAccountInfoErrorMsg=r.data.error)}).catch(function(r){c.statusUpdateError=!0,c.basicAccountInfoErrorMsg=r})}var c=this;e.isLoggedIn()?(c.currentAccountType=e.currentUser().accountType,"customer"===e.currentUser().accountType?(c.profileStatus=e.currentUser().accountStatus,c.codeReady=!1,c.sendActivationCode=function(){c.codeReady=!0,a.createActivationCode(e.currentUser().email).then(function(r){if(r.data.error)c.activationCodeError=!0,c.activationCodeErrorMsg=r.data.error;else{n({update_at:"profileActivationMail",email:e.currentUser().email,status:!0}),c.codeReady=!1,c.activationCodeError=!1}}).catch(function(r){c.activationCodeError=!0,c.activationCodeErrorMsg=r})},c.getProfileStatuses=function(){a.getAccountStatuses(e.currentUser().email).then(function(r){r.data.error?(c.statusLoadError=!0,c.statusLoadErrorMsg=r.data.error):(c.statusLoadError=!1,c.userStatuses=r.data.statuses)}).catch(function(r){c.statusLoadError=!0,c.statusLoadErrorMsg=r})},c.basicProfile={whos:e.currentUser().email,userId:e.currentUser().userId,formerName:"",sex:"",tele:"",address:""},c.saveBasicInfo=function(){a.saveBasicInfo(c.basicProfile).then(function(r){if(r.data.error)c.basicAccountInfoError=!0,c.basicAccountInfoErrorMsg=r.data.error;else{var t={update_at:"basic_info",email:e.currentUser().email,status:!0};a.updateUserStatus(t).then(function(r){!0===r.data.updated?(c.statusUpdateError=!1,o.reload()):(c.basicAccountInfoError=!0,c.basicAccountInfoErrorMsg=r.data.error)}).catch(function(r){c.statusUpdateError=!0,c.basicAccountInfoErrorMsg=r})}}).catch(function(r){})},c.branch={year:"",branch:""},c.saveBatchInfo=function(){a.saveBranchInfo(e.currentUser().email,c.branch).then(function(r){if(r.data.error)c.branchInfoError=!0,c.branchInfoErrorMsg=r.data.error;else if(r.data.success){c.branchInfoError=!1;var t={update_at:"branch",email:e.currentUser().email,status:!0};a.updateUserStatus(t).then(function(r){!0===r.data.updated?(c.branchInfoError=!1,o.reload()):(c.branchInfoError=!0,c.branchInfoErrorMsg=r.data.error)}).catch(function(r){c.branchInfoError=!0,c.branchInfoErrorMsg=r})}}).catch(function(r){c.branchInfoError=!0,c.branchInfoErrorMsg=r})},c.loadBasicInfo=function(r){a.loadUserInfo(r,e.currentUser().email).then(function(r){r.data.error?(c.userBasicInfoLoadingError=!0,c.userBasicInfoLoadingErrorMsg=r.data.error):(c.userBasicInfoLoadingError=!1,c.basicInfo=r.data.userInfo)}).catch(function(r){c.userBasicInfoLoadingError=!0,c.userBasicInfoLoadingErrorMsg=r})},c.getCommittee=function(){a.getCommittee().then(function(r){c.committees=r.data.committee}).catch(function(r){console.log(r)})},c.loadUserBranch=function(r){a.loadUserInfo(r,e.currentUser().email).then(function(r){r.data.error?(c.userInfoLoadingError=!0,c.userInfoLoadingErrorMsg=r.data.error):(c.userInfoLoadingError=!1,c.branchInfo=r.data.userInfo)}).catch(function(r){c.userInfoLoadingError=!0,c.userInfoLoadingErrorMsg=r})},c.activation={code:""},c.activeProfile=function(){a.validateActivationCode(e.currentUser().email,c.activation.code).then(function(r){r.data.error?(c.ActivationError=!0,c.ActivationErrorMsg=r.data.error):r.data.success&&(c.activationSuccess=!0,setTimeout(function(){e.Logout(),o.reload()},3e3))}).catch(function(r){c.ActivationError=!0,c.ActivationErrorMsg=r})},c.bankTellerInfo={preferredCommittee:"",additional_committee:"",whos:e.currentUser().email,userId:e.currentUser().accountId,tellerDoc:r.tellerDoc},c.saveBankTellerInfo=function(){c.bankTellerInfo.preferredCommittee&&c.bankTellerInfo.additional_committee?a.uploadTellerDocs(r.tellerDoc,e.currentUser().accountId).then(function(r){!1===r.data.success?(c.saveTellerError=!0,c.saveTellerErrorMsg=r.data.error):!0===r.data.success&&(c.bankTellerInfo.tellerDoc=r.data.docLocation,a.saveBankTeller(c.bankTellerInfo).then(function(r){if(r.data.error)c.saveTellerError=!0,c.saveTellerErrorMsg=r.data.error;else{n({update_at:"bankteller",email:e.currentUser().email,status:!0}),o.reload()}}).catch(function(r){c.saveTellerError=!0,c.saveTellerErrorMsg=r}))}).catch(function(r){c.saveTellerError=!0,c.saveTellerErrorMsg=r}):(c.saveTellerError=!0,c.saveTellerErrorMsg="All * fiends are required. Must not be empty")}):e.currentUser().accountType):t.path("/signin")}angular.module("nbaslp").controller("profileCtrl",r),r.$inject=["$scope","authentication","$location","account","$route"]}();
"use strict";!function(){function n(n,t){}angular.module("nbaslp").controller("welcomeCtrl",n),n.$inject=["authentication","$location"]}();
"use strict";!function(){function t(t,e,o){var r=this;t.isLoggedIn()?"admin"===t.currentUser().accountType?(r.committee={name:""},r.addPreferredCommittee=function(){o.addPreferredCommittee(r.committee).then(function(t){t.data.error?(r.addCommitteeError=!0,r.addCommitteeErrorMsg=t.data.error):(r.addCommitteeError=!1,r.addCommitteeSuccessMsg="Committee successfully added",setTimeout(function(){r.showCommittee()},200))}).catch(function(t){r.addCommitteeError=!0,r.addCommitteeErrorMsg=t})},r.showCommittee=function(){o.showAllCommittee().then(function(t){t.data.error?(r.committeeError=!0,r.committeeErrorMsg=t.data.error):(r.committeeError=!1,r.committeeList=t.data.committee)}).catch(function(t){r.committeeError=!0,r.committeeErrorMsg=t})},r.removeList=function(t){o.removeCommittee(t).then(function(t){t.data.error?alert(t.data.error):setTimeout(function(){r.showCommittee()},100)}).catch(function(t){alert(t)})}):e.path("/welcome"):e.path("/signin")}angular.module("nbaslp").controller("sitecontrollCtrl",t),t.$inject=["authentication","$location","sitecontroller"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImF1dGhlbnRpY2F0aW9uLnNlcnZpY2UuanMiLCJhY2NvdW50LnNlcnZpY2UuanMiLCJzaXRlLWNvbnRyb2xsZXIuc2VydmljZS5qcyIsIm5hdi5kaXJlY3RpdmUuanMiLCJuYXYuY29udHJvbGxlci5qcyIsImZvb3Rlci5kaXJlY3RpdmUuanMiLCJmaWxlTW9kZWwuZGlyZWN0aXZlLmpzIiwid2VsY29tZS5jb250cm9sbGVyLmpzIiwic2lnbnVwLmNvbnRyb2xsZXIuanMiLCJzaWduaW4uY29udHJvbGxlci5qcyIsInByb2ZpbGUuY29udHJvbGxlci5qcyIsInNpdGVjb250cm9sbC5jb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCJ0ZW1wbGF0ZVVybCIsIiRsb2NhdGlvblByb3ZpZGVyIiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsIndoZW4iLCJodG1sNU1vZGUiLCJlbmFibGVkIiwic2F2ZVRva2VuIiwiJHdpbmRvdyIsInRva2VuIiwibG9jYWxTdG9yYWdlIiwiZ2V0VG9rZW4iLCJpc0xvZ2dlZEluIiwicGF5bG9hZCIsIkpTT04iLCJwYXJzZSIsImF0b2IiLCJjdXJyZW50VXNlciIsInNwbGl0IiwiYWNjb3VudFN0YXR1cyIsInVzZXJJZCIsIl9pZCIsImFjY291bnRUeXBlIiwiYWNjb3VudElkIiwibmFtZSIsIkxvZ291dCIsInNpZ25VcCIsInVzZXIiLCIkaHR0cCIsInBvc3QiLCJzdWNjZXNzIiwiZGF0YSIsInNpZ25JbiIsImhhbmRsZVN1Y2Nlc3MiLCJyZW1vdmVJdGVtIiwiYXV0aGVudGljYXRpb24iLCJjcmVhdGVBY3RpdmF0aW9uQ29kZSIsInJlc3BvbnNlIiwiaGFuZGxlRXJyb3IiLCJ1cGxvYWRUZWxsZXJEb2NzIiwiZmlsZSIsImZkIiwiYXBwZW5kIiwiaWRlbnRpdHkiLCJoZWFkZXJzIiwiQ29udGVudC1UeXBlIiwidW5kZWZpbmVkIiwidGhlbiIsInZhbGlkYXRlQWN0aXZhdGlvbkNvZGUiLCJjYXRjaCIsImNvZGUiLCJnZXRDb21taXR0ZWUiLCJnZXRBY2NvdW50U3RhdHVzZXMiLCJnZXQiLCJzYXZlQmFzaWNJbmZvIiwidXBkYXRlVXNlclN0YXR1cyIsInRyYW5zZm9ybVJlcXVlc3QiLCJzYXZlQmFua1RlbGxlciIsInNhdmVCcmFuY2hJbmZvIiwibG9hZFVzZXJJbmZvIiwiY29sbGVjdGlvbk5hbWUiLCJ0ZWxsZXIiLCJhY2NvdW50IiwiJGluamVjdCIsImFkZFByZWZlcnJlZENvbW1pdHRlZSIsInJlbW92ZUNvbW1pdHRlZSIsInNob3dBbGxDb21taXR0ZWUiLCJjb21taXR0ZWVJZCIsImRlbGV0ZSIsInNpdGVjb250cm9sbGVyIiwiZGlyZWN0aXZlIiwic2l0ZU5hdiIsInJlc3RyaWN0IiwibmF2Q3RybCIsIiRsb2NhdGlvbiIsIm52bSIsImxvZ2dlZEluTmFtZSIsImN1cnJlbnRBY2NvdW50VHlwZSIsImxvZ2dlZEluVXJpIiwibG9nb3V0IiwicGF0aCIsInNpdGVGb290ZXIiLCJmaWxlTW9kZWwiLCJsaW5rIiwic2NvcGUiLCIkZWxlbWVudCIsInBhcnNlZEZpbGVTZXR0ZXIiLCIkcGFyc2UiLCJhdHRycyIsImFzc2lnbiIsIm9uIiwiJGFwcGx5IiwiZmlsZXMiLCJzaWdudXBDdHJsIiwicmVndm0iLCJ0aGlzIiwibGFzdE5hbWUiLCJkaXNwbGF5TmFtZSIsImVtYWlsIiwicGFzc3dvcmQiLCJjb25maXJtUGFzc3dvcmQiLCJyZWdpc3RlciIsIlJlZ2lzdHJhdGlvbkVycm9yTXNnIiwiUmVnaXN0cmF0aW9uRXJyb3IiLCJlcnJvciIsImVyciIsInNpZ25pbkN0cmwiLCJsdm0iLCJsb2dpbkVycm9yTXNnIiwibG9naW5FcnJvciIsImRvTG9naW4iLCJwcm92bSIsIiRzY29wZSIsIiRyb3V0ZSIsInN0YXR1c1VwZGF0ZXIiLCJ1cGRhdGVPYmplY3QiLCJiYXNpY0FjY291bnRJbmZvRXJyb3IiLCJiYXNpY0FjY291bnRJbmZvRXJyb3JNc2ciLCJyZWxvYWQiLCJzdGF0dXNVcGRhdGVFcnJvciIsImNvZGVSZWFkeSIsInByb2ZpbGVTdGF0dXMiLCJhY3RpdmF0aW9uQ29kZUVycm9yTXNnIiwic2VuZEFjdGl2YXRpb25Db2RlIiwidXBkYXRlZFN0YXR1cyIsInVwZGF0ZV9hdCIsInN0YXR1cyIsImFjdGl2YXRpb25Db2RlRXJyb3IiLCJzdGF0dXNMb2FkRXJyb3IiLCJzdGF0dXNMb2FkRXJyb3JNc2ciLCJiYXNpY1Byb2ZpbGUiLCJ1c2VyU3RhdHVzZXMiLCJzdGF0dXNlcyIsIndob3MiLCJ0ZWxlIiwiYWRkcmVzcyIsInVwZGF0ZWQiLCJicmFuY2hJbmZvRXJyb3JNc2ciLCJicmFuY2giLCJicmFuY2hJbmZvRXJyb3IiLCJ1c2VyQmFzaWNJbmZvTG9hZGluZ0Vycm9yIiwidXNlckJhc2ljSW5mb0xvYWRpbmdFcnJvck1zZyIsInVzZXJJbmZvTG9hZGluZ0Vycm9yIiwidXNlckluZm9Mb2FkaW5nRXJyb3JNc2ciLCJsb2FkQmFzaWNJbmZvIiwiYmFzaWNJbmZvIiwidXNlckluZm8iLCJBY3RpdmF0aW9uRXJyb3IiLCJjb21taXR0ZWVzIiwiY29tbWl0dGVlIiwic2V0VGltZW91dCIsImJyYW5jaEluZm8iLCJhZGRpdGlvbmFsX2NvbW1pdHRlZSIsImFjdGl2YXRpb24iLCJzYXZlVGVsbGVyRXJyb3JNc2ciLCJiYW5rVGVsbGVySW5mbyIsImRvY0xvY2F0aW9uIiwic2F2ZVRlbGxlckVycm9yIiwiYWN0aXZhdGlvblN1Y2Nlc3MiLCJBY3RpdmF0aW9uRXJyb3JNc2ciLCJwcmVmZXJyZWRDb21taXR0ZWUiLCJ0ZWxsZXJEb2MiLCJzYXZlQmFua1RlbGxlckluZm8iLCJwcm9maWxlQ3RybCIsIndlbGNvbWVDdHJsIiwic2l0ZWNvbnRyb2xsQ3RybCIsImFkU2l0ZSIsImFkZENvbW1pdHRlZUVycm9yTXNnIiwiYWRkQ29tbWl0dGVlRXJyb3IiLCJhZGRDb21taXR0ZWVTdWNjZXNzTXNnIiwic2hvd0NvbW1pdHRlZSIsImNvbW1pdHRlZUVycm9yIiwiY29tbWl0dGVl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QUEsU0FBQVYsR0FLSWlJLEVBQU9FLEtBQUFBLE9BQ1BGLEVBQU9HLG1CQUFQLEVBSkFILEVBQU9DLHFCQUF1QmxJLEVBQVNOLEtBQUt5RSxRQVF4QzhELEVBQU9JLG1CQUFQLEVBQ0RKLEVBRkhHLHVCQUFBLCtCQU1HRCxXQUFBQSxXQUNBRCxFQUFBQSxpQkFuQmYsUUF1Qkp0SCxNQUFBLFNBQUF3RCxHQUNPaUUsRUFBQUEsbUJBQXNCLEVBQ3pCckcsRUFDS0gscUJBREx1QyxLQVFZNkQsRUFBQUEsY0FBT0ssV0FDUEwsRUFDSHBHLG1CQUVKakIsS0FBTSxTQUFBWixHQUNJc0ksRUFBQUEsS0FBUG5FLE9BQ09vRSxFQUFBQSxnQkFBUCxFQWRSTixFQUFBTSxrQkFBQXZJLEVBQUFOLEtBQUF5RSxRQWtCSjhELEVBQUFLLGdCQUFBLEVBQ09FLEVBQWFDLGNBQUMzRyxFQUFnQnBDLEtBQUFzSCxhQUtyQjBCLE1BQUFBLFNBQUFBLEdBREpULEVBR0tLLGdCQUFBLEVBQ0RyQixFQUFBQSxrQkFBaUI3QyxLQU1yQnNFLEVBQUFBLFdBQUEsU0FBQTVHLEdBQ0hFLEVBZlRKLGdCQUFBRSxHQWtCQ3BCLEtBQUEsU0FBQVYsR0FDY0EsRUFBZk4sS0FBQXlFLE1BQ0h1RSxNQUFBMUksRUFBQU4sS0FBQXlFLE9BSUo4QyxXQUFBLFdBQ0pnQixFQUFBSSxpQkF6RkwsT0E2RXlCekgsTUFBTSxTQUFBd0QsR0FDSHNFLE1BQU10RSxPQUtsQi9CLEVBQVVNLEtBQUssWUFJbkJOLEVBQVVNLEtBQUssV0FyRnZCbkYsUUFDS0MsT0FBTyxVQUdadUssV0FBQUEsbUJBQTRCQSxHQUU1QkEsRUFBU0EsU0FBaUJsSSxpQkFBZ0J1QyxZQUFXTCxrQkFSekQiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIGVudHJ5IHBvaW50IGZvciBhbmd1bGFyIGZyb250LWVuZFxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuYmEtc2xwLCAyMDE3XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbmJhc2xwJywgWyduZ1Jlc291cmNlJywgJ25nUm91dGUnXSlcbiAgICAgICAgLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJywgJyRsb2NhdGlvblByb3ZpZGVyJywgY29uZmlnXSk7XG5cbiAgICBmdW5jdGlvbiBjb25maWcoJHJvdXRlUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSB7XG4gICAgICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICAgICAgICAud2hlbignLycsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2hvbWUvd2VsY29tZS93ZWxjb21lLnZpZXcuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3dlbGNvbWVDdHJsJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICd3dm0nLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvc2lnbnVwJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2lnbnVwL3NpZ251cC52aWV3Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzaWdudXBDdHJsJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdyZWd2bScsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9zaWduaW4nLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzaWduaW4vc2lnbmluLnZpZXcuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpZ25pbkN0cmwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2x2bScsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9wcm9maWxlJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncHJvZmlsZS9wcm9maWxlLnZpZXcuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3Byb2ZpbGVDdHJsJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdwcm92bScsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9oZWxwJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnaGVscC9oZWxwLnZpZXcuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2hlbHBDdHJsJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdodm0nLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvc2l0ZWNvbnRyb2xsJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYWRtaW4vc2l0ZWNvbnRyb2xsL3NpdGVjb250cm9sbC52aWV3Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzaXRlY29udHJvbGxDdHJsJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdhZFNpdGUnLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvd2VsY29tZScsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3dlbGNvbWUvd2VsY29tZS52aWV3Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd3ZWxjb21lQ3RybCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnd3ZtJyxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh7XG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG59KSgpO1xuIiwiLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IHNldHRpbmcgdXAgYXV0aGVudGljYXRpb24gc2VydmljZSBcbnwgQGF1dGhvcjogamFoaWQgaGFxdWUgPGphaGlkLmhhcXVlQHlhaG9vLmNvbT5cbnwgQGNvcHlyaWdodDogbmJhLXNscCwgMjAxN1xufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5cbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ25iYXNscCcpXG4gICAgLnNlcnZpY2UoJ2F1dGhlbnRpY2F0aW9uJywgYXV0aGVudGljYXRpb24pO1xuXG5hdXRoZW50aWNhdGlvbi4kaW5qZWN0ID0gWyckd2luZG93JywgJyRodHRwJ107XG5cbmZ1bmN0aW9uIGF1dGhlbnRpY2F0aW9uKCR3aW5kb3csICRodHRwKSB7XG4vLyBzYXZpbmcgdG9rZW4uXG4gICAgY29uc3Qgc2F2ZVRva2VuID1cdGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZVsnbmJhc2xwJ10gPSB0b2tlbjtcbiAgICB9O1xuXG4gICAgY29uc3QgZ2V0VG9rZW4gPVx0ZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2VbJ25iYXNscCddO1xuICAgIH07XG5cbiAgICBjb25zdCBpc0xvZ2dlZEluID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGdldFRva2VuKCk7XG4gICAgICAgIGxldCBwYXlsb2FkO1xuXG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgcGF5bG9hZCA9IHRva2VuLnNwbGl0KCcuJylbMV07XG4gICAgICAgICAgICBwYXlsb2FkID0gJHdpbmRvdy5hdG9iKHBheWxvYWQpO1xuICAgICAgICAgICAgcGF5bG9hZCA9IEpTT04ucGFyc2UocGF5bG9hZCk7XG4gICAgICAgICAgICByZXR1cm4gcGF5bG9hZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBjdXJyZW50VXNlciA9ICgpID0+IHtcbiAgICAgICAgaWYgKGlzTG9nZ2VkSW4pIHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gZ2V0VG9rZW4oKTtcbiAgICAgICAgICAgIGxldCBwYXlsb2FkID0gdG9rZW4uc3BsaXQoJy4nKVsxXTtcbiAgICAgICAgICAgIHBheWxvYWQgPSAkd2luZG93LmF0b2IocGF5bG9hZCk7XG4gICAgICAgICAgICBwYXlsb2FkID0gSlNPTi5wYXJzZShwYXlsb2FkKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1c2VySWQ6IHBheWxvYWQuX2lkLFxuICAgICAgICAgICAgICAgIGVtYWlsOiBwYXlsb2FkLmVtYWlsLFxuICAgICAgICAgICAgICAgIGFjY291bnRTdGF0dXM6IHBheWxvYWQuYWNjb3VudFN0YXR1cyxcbiAgICAgICAgICAgICAgICBhY2NvdW50VHlwZTogcGF5bG9hZC5hY2NvdW50VHlwZSxcbiAgICAgICAgICAgICAgICBhY2NvdW50SWQ6IHBheWxvYWQudXNlcklkLFxuICAgICAgICAgICAgICAgIG5hbWU6IHBheWxvYWQubmFtZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgTG9nb3V0ID0gKCkgPT4ge1xuICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCduYmFzbHAnKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc2lnblVwID0gKHVzZXIpID0+IHtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2lnbnVwJywgdXNlcikuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgc2F2ZVRva2VuKGRhdGEudG9rZW4pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc2lnbkluID0gKHVzZXIpID0+IHtcbiAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2lnbmluJywgdXNlcikuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgc2F2ZVRva2VuKGRhdGEudG9rZW4pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlU3VjY2VzcyA9IChyZXNwb25zZSkgPT4gcmVzcG9uc2U7XG5cbiAgICBjb25zdCBoYW5kbGVFcnJvciA9IChyZXNwb25zZSkgPT4gcmVzcG9uc2U7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBjdXJyZW50VXNlcjogY3VycmVudFVzZXIsXG4gICAgICAgIHNhdmVUb2tlbjogc2F2ZVRva2VuLFxuICAgICAgICBnZXRUb2tlbjogZ2V0VG9rZW4sXG4gICAgICAgIGlzTG9nZ2VkSW46IGlzTG9nZ2VkSW4sXG4gICAgICAgIHNpZ25VcDogc2lnblVwLFxuICAgICAgICBzaWduSW46IHNpZ25JbixcbiAgICAgICAgTG9nb3V0OiBMb2dvdXQsXG4gICAgfTtcbn1cblxuIiwiLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IHNldHRpbmcgdXAgYWNjb3VudCBzZXJ2aWNlIGZvciBhcHBcbnwgQGF1dGhvcjogamFoaWQgaGFxdWUgPGphaGlkLmhhcXVlQHlhaG9vLmNvbT5cbnwgQGNvcHlyaWdodDogbmJhLXNscCwgMjAxN1xufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5cbid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25iYXNscCcpXG4gICAgICAgIC5zZXJ2aWNlKCdhY2NvdW50JywgYWNjb3VudCk7XG5cbiAgICBhY2NvdW50LiRpbmplY3QgPSBbJyR3aW5kb3cnLCAnJGh0dHAnXTtcblxuICAgIGZ1bmN0aW9uIGFjY291bnQoJHdpbmRvdywgJGh0dHApIHtcblxuICAgICAgICBjb25zdCBjcmVhdGVBY3RpdmF0aW9uQ29kZSA9ICh1c2VySWQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cCBcbiAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS8nICsgdXNlcklkICsgJy9nZW5lcmF0ZXZhbGlkYXRpb25jb2RlJylcbiAgICAgICAgICAgICAgICAudGhlbihoYW5kbGVTdWNjZXNzKVxuICAgICAgICAgICAgICAgIC5jYXRjaChoYW5kbGVFcnJvcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgdmFsaWRhdGVBY3RpdmF0aW9uQ29kZSA9ICh1c2VySWQsIGNvZGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cCBcbiAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS8nICsgdXNlcklkICsgJy8nICsgY29kZSArICcvdmFsaWRhdGUnKVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBnZXRBY2NvdW50U3RhdHVzZXMgPSAodXNlcklkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAgXG4gICAgICAgICAgICAgICAgLmdldCgnL2FwaS8nICsgdXNlcklkICsgJy9zdGF0dXNlcycpXG4gICAgICAgICAgICAgICAgLnRoZW4oaGFuZGxlU3VjY2VzcylcbiAgICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGdldENvbW1pdHRlZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cFxuICAgICAgICAgICAgICAgIC5nZXQoJy9hcGkvc2hvd2NvbW1pdHRlZScpXG4gICAgICAgICAgICAgICAgLnRoZW4oaGFuZGxlU3VjY2VzcylcbiAgICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHVwZGF0ZVVzZXJTdGF0dXMgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwXG4gICAgICAgICAgICAgICAgLnBvc3QoJy9hcGkvdXNlcnN0YXR1cycsIGRhdGEpXG4gICAgICAgICAgICAgICAgLnRoZW4oaGFuZGxlU3VjY2VzcylcbiAgICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHNhdmVCYXNpY0luZm8gPSAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwIFxuICAgICAgICAgICAgICAgIC5wb3N0KCcvYXBpL2NyZWF0ZWJhc2ljcHJvZmlsZScsIGRhdGEpXG4gICAgICAgICAgICAgICAgLnRoZW4oaGFuZGxlU3VjY2VzcylcbiAgICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHNhdmVCcmFuY2hJbmZvID0gKHVzZXJJZCwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwXG4gICAgICAgICAgICAgICAgLnBvc3QoJy9hcGkvJyArIHVzZXJJZCArICcvc2F2ZWJyYW5jaGluZm8nLCBkYXRhKVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB1cGxvYWRUZWxsZXJEb2NzID0gKGZpbGUsIHVzZXJJZCkgPT4ge1xuICAgICAgICAgICAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICBmZC5hcHBlbmQoJ3RlbGxlckRvYycsIGZpbGUpO1xuXG4gICAgICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS9kb2N1cGxvYWQvJyArIHVzZXJJZCwgZmQsIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtUmVxdWVzdDogYW5ndWxhci5pZGVudGl0eSxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBzYXZlQmFua1RlbGxlciA9ICh0ZWxsZXIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cFxuICAgICAgICAgICAgICAgIC5wb3N0KCcvYXBpL3NhdmViYW5rdGVsbGVyJywgdGVsbGVyKVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKlxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8IEZvbGxvd2luZyBmdW5jdGlvbiB3aWxsIGxvYWQgYWxsIGRhdGEgZm9yIHVzZXJcbiAgICAgICAgfCBiYXNlZCBvbiBnaXZlbiB1c2VyRW1haWwgYW5kIGNvbGxlY3Rpb24gbmFtZVxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAqL1xuICAgICAgICBjb25zdCBsb2FkVXNlckluZm8gPSAoY29sbGVjdGlvbk5hbWUsIHVzZXJJZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwIFxuICAgICAgICAgICAgICAgIC5nZXQoJy9hcGkvJyArIHVzZXJJZCArICcvJyArIGNvbGxlY3Rpb25OYW1lICsgJy91c2VyaW5mbycpXG4gICAgICAgICAgICAgICAgLnRoZW4oaGFuZGxlU3VjY2VzcylcbiAgICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZVN1Y2Nlc3MgPSAocmVzcG9uc2UpID0+IHJlc3BvbnNlO1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZUVycm9yID0gKHJlc3BvbnNlKSA9PiByZXNwb25zZTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXBsb2FkVGVsbGVyRG9jczogdXBsb2FkVGVsbGVyRG9jcyxcbiAgICAgICAgICAgIGNyZWF0ZUFjdGl2YXRpb25Db2RlOiBjcmVhdGVBY3RpdmF0aW9uQ29kZSxcbiAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZhdGlvbkNvZGU6IHZhbGlkYXRlQWN0aXZhdGlvbkNvZGUsXG4gICAgICAgICAgICBnZXRBY2NvdW50U3RhdHVzZXM6IGdldEFjY291bnRTdGF0dXNlcyxcbiAgICAgICAgICAgIHVwZGF0ZVVzZXJTdGF0dXM6IHVwZGF0ZVVzZXJTdGF0dXMsXG4gICAgICAgICAgICBzYXZlQmFzaWNJbmZvOiBzYXZlQmFzaWNJbmZvLFxuICAgICAgICAgICAgc2F2ZUJyYW5jaEluZm86IHNhdmVCcmFuY2hJbmZvLFxuICAgICAgICAgICAgbG9hZFVzZXJJbmZvOiBsb2FkVXNlckluZm8sXG4gICAgICAgICAgICBnZXRDb21taXR0ZWU6IGdldENvbW1pdHRlZSxcbiAgICAgICAgICAgIHNhdmVCYW5rVGVsbGVyOiBzYXZlQmFua1RlbGxlcixcbiAgICAgICAgfTtcbiAgICB9XG5cbn0pKCk7XG4iLCIvKlxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnwgc2V0dGluZyB1cCBzZXJ2aWNlIGZvciBzaXRlLWNvbnRyb2xsZXIgZm9yIGFkbWluXG58IEBhdXRob3I6IGphaGlkIGhhcXVlIDxqYWhpZC5oYXF1ZUB5YWhvby5jb20+XG58IEBjb3B5cmlnaHQ6IG5iYS1zbHAsIDIwMThcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25iYXNscCcpXG4gICAgICAgIC5zZXJ2aWNlKCdzaXRlY29udHJvbGxlcicsIHNpdGVjb250cm9sbGVyKTtcblxuICAgIHNpdGVjb250cm9sbGVyLiRpbmplY3QgPSBbJyRodHRwJ107XG5cbiAgICBmdW5jdGlvbiBzaXRlY29udHJvbGxlcigkaHR0cCkge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgYWRkUHJlZmVycmVkQ29tbWl0dGVlID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cFxuICAgICAgICAgICAgICAgIC5wb3N0KCcvYXBpL2NyZWF0ZWNvbW1pdHRlZScsIGRhdGEpXG4gICAgICAgICAgICAgICAgLnRoZW4oaGFuZGxlU3VjY2VzcylcbiAgICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHNob3dBbGxDb21taXR0ZWUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAgICAgICAuZ2V0KCcvYXBpL3Nob3djb21taXR0ZWUnKVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZW1vdmVDb21taXR0ZWUgPSAoY29tbWl0dGVlSWQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cCBcbiAgICAgICAgICAgICAgICAuZGVsZXRlKCcvYXBpLycgKyBjb21taXR0ZWVJZCArICcvcmVtb3ZlY29tbWl0dGVlJylcbiAgICAgICAgICAgICAgICAudGhlbihoYW5kbGVTdWNjZXNzKVxuICAgICAgICAgICAgICAgIC5jYXRjaChoYW5kbGVFcnJvcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgaGFuZGxlU3VjY2VzcyA9IChyZXNwb25zZSkgPT4gcmVzcG9uc2U7XG5cbiAgICAgICAgY29uc3QgaGFuZGxlRXJyb3IgPSAocmVzcG9uc2UpID0+IHJlc3BvbnNlO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhZGRQcmVmZXJyZWRDb21taXR0ZWU6IGFkZFByZWZlcnJlZENvbW1pdHRlZSxcbiAgICAgICAgICAgIHNob3dBbGxDb21taXR0ZWU6IHNob3dBbGxDb21taXR0ZWUsXG4gICAgICAgICAgICByZW1vdmVDb21taXR0ZWU6IHJlbW92ZUNvbW1pdHRlZSxcbiAgICAgICAgfTtcblxuICAgIH1cblxufSkoKTtcbiIsIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIG5hdmlnYXRpb24gZGlyZWN0aXZlIGZvciB0aGUgYXBwXG58IEBhdXRob3I6IGphaGlkIGhhcXVlIDxqYWhpZC5oYXF1ZUB5YWhvby5jb20+XG58IEBjb3B5cmlnaHQ6IG5iYXNscCwgMjAxN1xufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5cbid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25iYXNscCcpXG4gICAgICAgIC5kaXJlY3RpdmUoJ3NpdGVOYXYnLCBzaXRlTmF2KTtcblxuICAgIGZ1bmN0aW9uIHNpdGVOYXYoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0VBJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tbW9uL2RpcmVjdGl2ZXMvbmF2L3NpdGUtbmF2LnRlbXBsYXRlLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ25hdkN0cmwgYXMgbnZtJyxcbiAgICAgICAgfTtcbiAgICB9XG59KSgpO1xuIiwiLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IHNldHRpbmcgdXAgY29udHJvbGxlciBmb3IgbmF2aWdhdGlvblxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuYmFzbHAsIDIwMTdcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuY29udHJvbGxlcignbmF2Q3RybCcsIG5hdkN0cmwpO1xuXG4gICAgbmF2Q3RybC4kaW5qZWN0ID0gWydhdXRoZW50aWNhdGlvbicsICckbG9jYXRpb24nXTtcblxuICAgIGZ1bmN0aW9uIG5hdkN0cmwoYXV0aGVudGljYXRpb24sICRsb2NhdGlvbikge1xuICAgICAgICBjb25zdCBudm0gPSB0aGlzO1xuXG4gICAgICAgIGlmIChhdXRoZW50aWNhdGlvbi5pc0xvZ2dlZEluKCkpIHtcbiAgICAgICAgICAgIG52bS5sb2dnZWRJblVyaSA9IHRydWU7XG4gICAgICAgICAgICBudm0ubG9nZ2VkSW5OYW1lID0gYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5uYW1lO1xuICAgICAgICAgICAgbnZtLmN1cnJlbnRBY2NvdW50VHlwZSA9IGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuYWNjb3VudFR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBudm0ubG9nZ2VkSW5VcmkgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG52bS5sb2dvdXQgPSAoKSA9PiB7XG4gICAgICAgICAgICBhdXRoZW50aWNhdGlvbi5Mb2dvdXQoKTtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvc2lnbmluJyk7XG4gICAgICAgIH07XG4gICAgfVxufSkoKTtcbiIsIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIGZvb3RlciBkaXJlY3RpdmUgZm9yIGFwcGxpY2F0aW9uXG58IEBhdXRob3I6IGphaGlkIGhhcXVlIDxqYWhpZC5oYXF1ZUB5YWhvby5jb20+XG58IEBjb3B5cmlnaHQ6IG5iYXNscCwgMjAxN1xufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5cbid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25iYXNscCcpXG4gICAgICAgIC5kaXJlY3RpdmUoJ3NpdGVGb290ZXInLCBzaXRlRm9vdGVyKTtcbiAgICBmdW5jdGlvbiBzaXRlRm9vdGVyKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbW1vbi9kaXJlY3RpdmVzL2Zvb3Rlci9mb290ZXIudGVtcGxhdGUuaHRtbCcsXG4gICAgICAgIH07XG4gICAgfVxufSkoKTtcbiIsIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIGZpbGUgdXBsb2FkIGRpcmVjdGl2ZVxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuY2xoYWxhbCwgMjAxN1xufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG4oZnVuY3Rpb24oKXtcblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ25iYXNscCcpXG5cdFx0LmRpcmVjdGl2ZSgnZmlsZU1vZGVsJywgZmlsZU1vZGVsKTtcblxuXHRmaWxlTW9kZWwuJGluamVjdCA9IFsnJHBhcnNlJ107XG5cblx0ZnVuY3Rpb24gZmlsZU1vZGVsKCRwYXJzZSl7XG5cdFx0cmV0dXJuIHtcbiAgICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICB2YXIgcGFyc2VkRmlsZSA9ICRwYXJzZShhdHRycy5maWxlTW9kZWwpO1xuICAgICAgICAgICAgdmFyIHBhcnNlZEZpbGVTZXR0ZXIgPSBwYXJzZWRGaWxlLmFzc2lnbjtcbiAgICAgICAgICAgICRlbGVtZW50Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICBwYXJzZWRGaWxlU2V0dGVyKHNjb3BlLCAkZWxlbWVudFswXS5maWxlc1swXSk7XG4gICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgfSxcbiAgICB9O1xuXHR9XG59KSgpO1xuIiwiLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IHNldHRpbmcgdXAgY29udHJvbGxlciBmb3Igd2VsY29tZSBwYWdlXG58IEBhdXRob3I6IGphaGlkIGhhcXVlIDxqYWhpZC5oYXF1ZUB5YWhvby5jb20+XG58IEBjb3B5cmlnaHQ6IG5iYXNscCwgMjAxN1xufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5cbid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICBhbmd1bGFyIFxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuY29udHJvbGxlcignd2VsY29tZUN0cmwnLCB3ZWxjb21lQ3RybCk7XG5cbiAgICB3ZWxjb21lQ3RybC4kaW5qZWN0ID0gWydhdXRoZW50aWNhdGlvbicsICckbG9jYXRpb24nXTtcblxuICAgIGZ1bmN0aW9uIHdlbGNvbWVDdHJsKGF1dGhlbnRpY2F0aW9uLCAkbG9jYXRpb24pIHtcbiAgICAgICAgY29uc3Qgd3ZtID0gdGhpcztcbiAgICB9XG5cbn0pKCk7XG4iLCIvKlxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnwgc2V0dGluZyB1cCBzaWdudXAgY29udHJvbGxlciBmb3IgdGhlIGFwcFxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuYmFzbHAsIDIwMTdcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuY29udHJvbGxlcignc2lnbnVwQ3RybCcsIHNpZ251cEN0cmwpO1xuXG4gICAgc2lnbnVwQ3RybC4kaW5qZWN0ID0gWydhdXRoZW50aWNhdGlvbicsICckbG9jYXRpb24nXTtcblxuICAgIGZ1bmN0aW9uIHNpZ251cEN0cmwoYXV0aGVudGljYXRpb24sICRsb2NhdGlvbikge1xuICAgICAgICBjb25zdCByZWd2bSA9IHRoaXM7XG5cbiAgICAgICAgLy8gdXNlciBvYmplY3QuXG4gICAgICAgIHJlZ3ZtLnVzZXIgPSB7XG4gICAgICAgICAgICBmaXJzdE5hbWU6ICcnLFxuICAgICAgICAgICAgbGFzdE5hbWU6ICcnLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICcnLFxuICAgICAgICAgICAgZW1haWw6ICcnLFxuICAgICAgICAgICAgcGFzc3dvcmQ6ICcnLFxuICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkOiAnJyxcbiAgICAgICAgfTtcblxuICAgICAgICByZWd2bS5yZWdpc3RlciA9ICgpID0+IHtcbiAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uXG4gICAgICAgICAgICAgICAgLnNpZ25VcChyZWd2bS51c2VyKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVndm0uUmVnaXN0cmF0aW9uRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVndm0uUmVnaXN0cmF0aW9uRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVndm0uUmVnaXN0cmF0aW9uRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvd2VsY29tZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWd2bS5SZWdpc3RyYXRpb25FcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWd2bS5SZWdpc3RyYXRpb25FcnJvck1zZyA9IGVyci5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGF1dGhlbnRpY2F0aW9uLmlzTG9nZ2VkSW4oKSkge1xuICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy93ZWxjb21lJyk7XG4gICAgICAgIH1cbiAgICB9XG59KSgpO1xuIiwiLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IHNldHRpbmcgdXAgY29udHJvbGxlciBmb3IgbG9naW4gcGFnZVxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuYmFzbHAsIDIwMTdcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuY29udHJvbGxlcignc2lnbmluQ3RybCcsIHNpZ25pbkN0cmwpO1xuXG4gICAgc2lnbmluQ3RybC4kaW5qZWN0ID0gWydhdXRoZW50aWNhdGlvbicsICckbG9jYXRpb24nXTtcblxuICAgIGZ1bmN0aW9uIHNpZ25pbkN0cmwoYXV0aGVudGljYXRpb24sICRsb2NhdGlvbikge1xuICAgICAgICBjb25zdCBsdm0gPSB0aGlzO1xuXG4gICAgICAgIGx2bS51c2VyID0ge1xuICAgICAgICAgICAgZW1haWw6ICcnLFxuICAgICAgICAgICAgcGFzc3dvcmQ6ICcnLFxuICAgICAgICB9OyBcblxuICAgICAgICBpZiAoYXV0aGVudGljYXRpb24uaXNMb2dnZWRJbigpKSB7XG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3dlbGNvbWUnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGx2bS5sb2dpbiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWx2bS51c2VyLmVtYWlsIHx8ICFsdm0udXNlci5wYXNzd29yZCkge1xuICAgICAgICAgICAgICAgICAgICBsdm0ubG9naW5FcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGx2bS5sb2dpbkVycm9yTXNnID0gYEVycm9yISBhbGwgKiBmaWVsZHMgYXJlIHJlcXVpcmVkYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGx2bS5sb2dpbkVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGx2bS5kb0xvZ2luKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbHZtLmRvTG9naW4gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRpb25cbiAgICAgICAgICAgICAgICAgICAgLnNpZ25Jbihsdm0udXNlcilcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGx2bS5sb2dpbkVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGx2bS5sb2dpbkVycm9yTXNnID0gZXJyLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3dlbGNvbWUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG59KSgpO1xuIiwiLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IHNldHRpbmcgdXAgY29udHJvbGxlciBmb3IgcHJvZmlsZSBwYWdlXG58IEBhdXRob3I6IGphaGlkIGhhcXVlIDxqYWhpZC5oYXF1ZUB5YWhvby5jb20+XG58IEBjb3B5cmlnaHQ6IG5iYS1zbHAsIDIwMTdcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25iYXNscCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdwcm9maWxlQ3RybCcsIHByb2ZpbGVDdHJsKTtcblxuICAgIHByb2ZpbGVDdHJsLiRpbmplY3QgPSBbJyRzY29wZScsICdhdXRoZW50aWNhdGlvbicsICckbG9jYXRpb24nLCAnYWNjb3VudCcsICckcm91dGUnXTtcblxuICAgIGZ1bmN0aW9uIHByb2ZpbGVDdHJsKCRzY29wZSwgYXV0aGVudGljYXRpb24sICRsb2NhdGlvbiwgYWNjb3VudCwgJHJvdXRlKSB7XG5cbiAgICAgICAgY29uc3QgcHJvdm0gPSB0aGlzO1xuXG4gICAgICAgIGZ1bmN0aW9uIHN0YXR1c1VwZGF0ZXIodXBkYXRlT2JqZWN0KSB7XG5cbiAgICAgICAgICAgIC8vIGNhbGxpbmcgc2VydmljZSBmdW5jdGlvbi5cbiAgICAgICAgICAgIGFjY291bnRcbiAgICAgICAgICAgICAgICAudXBkYXRlVXNlclN0YXR1cyh1cGRhdGVPYmplY3QpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS51cGRhdGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5zdGF0dXNVcGRhdGVFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHJvdXRlLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uYmFzaWNBY2NvdW50SW5mb0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJhc2ljQWNjb3VudEluZm9FcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwcm92bS5zdGF0dXNVcGRhdGVFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZtLmJhc2ljQWNjb3VudEluZm9FcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhdXRoZW50aWNhdGlvbi5pc0xvZ2dlZEluKCkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBwcm92bS5jdXJyZW50QWNjb3VudFR5cGUgPSBhdXRoZW50aWNhdGlvbi5jdXJyZW50VXNlcigpLmFjY291bnRUeXBlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBjaGVja2luZyBhY2NvdW50IHR5cGVcbiAgICAgICAgICAgIGlmIChhdXRoZW50aWNhdGlvbi5jdXJyZW50VXNlcigpLmFjY291bnRUeXBlID09PSAnY3VzdG9tZXInKSB7XG5cbiAgICAgICAgICAgICAgICBwcm92bS5wcm9maWxlU3RhdHVzID0gYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5hY2NvdW50U3RhdHVzO1xuXG4gICAgICAgICAgICAgICAgcHJvdm0uY29kZVJlYWR5ID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBwcm92bS5zZW5kQWN0aXZhdGlvbkNvZGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZtLmNvZGVSZWFkeSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jcmVhdGVBY3RpdmF0aW9uQ29kZShhdXRoZW50aWNhdGlvbi5jdXJyZW50VXNlcigpLmVtYWlsKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmFjdGl2YXRpb25Db2RlRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5hY3RpdmF0aW9uQ29kZUVycm9yTXNnID0gcmVzcG9uc2UuZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRTdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVfYXQ6ICdwcm9maWxlQWN0aXZhdGlvbk1haWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1VwZGF0ZXIodXBkYXRlZFN0YXR1cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uY29kZVJlYWR5ID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uYWN0aXZhdGlvbkNvZGVFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5hY3RpdmF0aW9uQ29kZUVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5hY3RpdmF0aW9uQ29kZUVycm9yTXNnID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vIGdldCB1c2VyIGFjY291bnQgc3RhdHVlcyBcbiAgICAgICAgICAgICAgICBwcm92bS5nZXRQcm9maWxlU3RhdHVzZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRBY2NvdW50U3RhdHVzZXMoYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5lbWFpbClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5zdGF0dXNMb2FkRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5zdGF0dXNMb2FkRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uc3RhdHVzTG9hZEVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnVzZXJTdGF0dXNlcyA9IHJlc3BvbnNlLmRhdGEuc3RhdHVzZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnN0YXR1c0xvYWRFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uc3RhdHVzTG9hZEVycm9yTXNnID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vIHNhdmluZyBiYXNpYyBwcm9maWxlIGluZm9cbiAgICAgICAgICAgICAgICBwcm92bS5iYXNpY1Byb2ZpbGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHdob3M6IGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZDogYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS51c2VySWQsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1lck5hbWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBzZXg6ICcnLFxuICAgICAgICAgICAgICAgICAgICB0ZWxlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogJycsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVCYXNpY0luZm8gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zYXZlQmFzaWNJbmZvKHByb3ZtLmJhc2ljUHJvZmlsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJhc2ljQWNjb3VudEluZm9FcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJhc2ljQWNjb3VudEluZm9FcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9hdDogJ2Jhc2ljX2luZm8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGluZyBzZXJ2aWNlIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlVXNlclN0YXR1cyh1cGRhdGVkU3RhdHVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnVwZGF0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uc3RhdHVzVXBkYXRlRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvdXRlLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uYmFzaWNBY2NvdW50SW5mb0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uYmFzaWNBY2NvdW50SW5mb0Vycm9yTXNnID0gcmVzcG9uc2UuZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uc3RhdHVzVXBkYXRlRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJhc2ljQWNjb3VudEluZm9FcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcHJvdm0uYnJhbmNoID0ge1xuICAgICAgICAgICAgICAgICAgICB5ZWFyOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgYnJhbmNoOiAnJyxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gYWRkaW5nIGJyYW5jaCBpbmZvXG4gICAgICAgICAgICAgICAgcHJvdm0uc2F2ZUJhdGNoSW5mbyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNhdmVCcmFuY2hJbmZvKGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuZW1haWwsIHByb3ZtLmJyYW5jaClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5icmFuY2hJbmZvRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5icmFuY2hJbmZvRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uYnJhbmNoSW5mb0Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkU3RhdHVzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2F0OiAnYnJhbmNoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBhdXRoZW50aWNhdGlvbi5jdXJyZW50VXNlcigpLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGxpbmcgc2VydmljZSBmdW5jdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZVVzZXJTdGF0dXModXBkYXRlZFN0YXR1cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS51cGRhdGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJyYW5jaEluZm9FcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm91dGUucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5icmFuY2hJbmZvRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5icmFuY2hJbmZvRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5icmFuY2hJbmZvRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJyYW5jaEluZm9FcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5icmFuY2hJbmZvRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJyYW5jaEluZm9FcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBzaG93IGJhc2ljIGluZm9cbiAgICAgICAgICAgICAgICBwcm92bS5sb2FkQmFzaWNJbmZvID0gKGNvbGxlY3Rpb25OYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5sb2FkVXNlckluZm8oY29sbGVjdGlvbk5hbWUsIGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuZW1haWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0udXNlckJhc2ljSW5mb0xvYWRpbmdFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnVzZXJCYXNpY0luZm9Mb2FkaW5nRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0udXNlckJhc2ljSW5mb0xvYWRpbmdFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5iYXNpY0luZm8gPSByZXNwb25zZS5kYXRhLnVzZXJJbmZvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS51c2VyQmFzaWNJbmZvTG9hZGluZ0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS51c2VyQmFzaWNJbmZvTG9hZGluZ0Vycm9yTXNnID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHByb3ZtLmdldENvbW1pdHRlZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldENvbW1pdHRlZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uY29tbWl0dGVlcyA9IHJlc3BvbnNlLmRhdGEuY29tbWl0dGVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gc2hvdyBicmFuY2ggaW5mb1xuICAgICAgICAgICAgICAgIHByb3ZtLmxvYWRVc2VyQnJhbmNoID0gKGNvbGxlY3Rpb25OYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5sb2FkVXNlckluZm8oY29sbGVjdGlvbk5hbWUsIGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuZW1haWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0udXNlckluZm9Mb2FkaW5nRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS51c2VySW5mb0xvYWRpbmdFcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS51c2VySW5mb0xvYWRpbmdFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5icmFuY2hJbmZvID0gcmVzcG9uc2UuZGF0YS51c2VySW5mbztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0udXNlckluZm9Mb2FkaW5nRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnVzZXJJbmZvTG9hZGluZ0Vycm9yTXNnID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgICAgICB8IGZvbGxvd2luZyBmdW5jdGlvbiB3aWxsIGFjdGl2ZSB0aGUgcHJvZmlsZSBcbiAgICAgICAgICAgICAgICB8IGJhc2VkIG9uIGdpdmVuIGNvZGVcbiAgICAgICAgICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgcHJvdm0uYWN0aXZhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJycsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHByb3ZtLmFjdGl2ZVByb2ZpbGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC52YWxpZGF0ZUFjdGl2YXRpb25Db2RlKGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuZW1haWwsIHByb3ZtLmFjdGl2YXRpb24uY29kZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5BY3RpdmF0aW9uRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5BY3RpdmF0aW9uRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uYWN0aXZhdGlvblN1Y2Nlc3MgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGxpbmcgdGhlIGxvZ291dCBmdW5jdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvbi5Mb2dvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3V0ZS5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLkFjdGl2YXRpb25FcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uQWN0aXZhdGlvbkVycm9yTXNnID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgICAgICB8IEZvbGxvd2luZyBmdW5jdGlvbiB3aWxsIGhhbmRsZSBiYW5rIHRlbGxlciBcbiAgICAgICAgICAgICAgICB8IHVwbG9hZFxuICAgICAgICAgICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBwcm92bS5iYW5rVGVsbGVySW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcHJlZmVycmVkQ29tbWl0dGVlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbF9jb21taXR0ZWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICB3aG9zOiBhdXRoZW50aWNhdGlvbi5jdXJyZW50VXNlcigpLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuYWNjb3VudElkLFxuICAgICAgICAgICAgICAgICAgICB0ZWxsZXJEb2M6ICRzY29wZS50ZWxsZXJEb2MsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVCYW5rVGVsbGVySW5mbyA9ICgpID0+IHsgICBcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXByb3ZtLmJhbmtUZWxsZXJJbmZvLnByZWZlcnJlZENvbW1pdHRlZSB8fCAhcHJvdm0uYmFua1RlbGxlckluZm8uYWRkaXRpb25hbF9jb21taXR0ZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVUZWxsZXJFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5zYXZlVGVsbGVyRXJyb3JNc2cgPSAnQWxsICogZmllbmRzIGFyZSByZXF1aXJlZC4gTXVzdCBub3QgYmUgZW1wdHknO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVwbG9hZFRlbGxlckRvY3MoJHNjb3BlLnRlbGxlckRvYywgYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5hY2NvdW50SWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdWNjZXNzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uc2F2ZVRlbGxlckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVUZWxsZXJFcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5zdWNjZXNzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5iYW5rVGVsbGVySW5mby50ZWxsZXJEb2MgPSByZXNwb25zZS5kYXRhLmRvY0xvY2F0aW9uO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNhdmVCYW5rVGVsbGVyKHByb3ZtLmJhbmtUZWxsZXJJbmZvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVUZWxsZXJFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5zYXZlVGVsbGVyRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVfYXQ6ICdiYW5rdGVsbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVXBkYXRlcih1cGRhdGVkU3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3V0ZS5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVUZWxsZXJFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVUZWxsZXJFcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVUZWxsZXJFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVUZWxsZXJFcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuYWNjb3VudFR5cGUgPT09ICdhZG1pbicpIHtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9zaWduaW4nKTtcbiAgICAgICAgfVxuICAgIH1cblxufSkoKTtcbiIsIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIGNvbnRyb2xsZXIgZm9yIHNpdGUtY29udHJvbGwgcGFnZVxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuYmEtc2xwLCAyMDE4XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuY29udHJvbGxlcignc2l0ZWNvbnRyb2xsQ3RybCcsIHNpdGVjb250cm9sbEN0cmwpO1xuXG4gICAgc2l0ZWNvbnRyb2xsQ3RybC4kaW5qZWN0ID0gWydhdXRoZW50aWNhdGlvbicsICckbG9jYXRpb24nLCAnc2l0ZWNvbnRyb2xsZXInXTtcblxuICAgIGZ1bmN0aW9uIHNpdGVjb250cm9sbEN0cmwoYXV0aGVudGljYXRpb24sICRsb2NhdGlvbiwgc2l0ZWNvbnRyb2xsZXIpIHtcbiAgICAgICAgY29uc3QgYWRTaXRlID0gdGhpcztcblxuICAgICAgICBpZiAoYXV0aGVudGljYXRpb24uaXNMb2dnZWRJbigpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChhdXRoZW50aWNhdGlvbi5jdXJyZW50VXNlcigpLmFjY291bnRUeXBlID09PSAnYWRtaW4nKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYWRTaXRlLmNvbW1pdHRlZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJycsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBhZGQgY29tbWl0dGVlXG4gICAgICAgICAgICAgICAgYWRTaXRlLmFkZFByZWZlcnJlZENvbW1pdHRlZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2l0ZWNvbnRyb2xsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRQcmVmZXJyZWRDb21taXR0ZWUoYWRTaXRlLmNvbW1pdHRlZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuYWRkQ29tbWl0dGVlRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuYWRkQ29tbWl0dGVlRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLmFkZENvbW1pdHRlZUVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkU2l0ZS5hZGRDb21taXR0ZWVTdWNjZXNzTXNnID0gJ0NvbW1pdHRlZSBzdWNjZXNzZnVsbHkgYWRkZWQnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aW1lIG91dCBhbmQgY2FsbCBzaG93IGNvbW1pdHRlZSBtZXRob2QuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLnNob3dDb21taXR0ZWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLmFkZENvbW1pdHRlZUVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuYWRkQ29tbWl0dGVlRXJyb3JNc2cgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gc2hvdyBjb21taXR0ZWVcbiAgICAgICAgICAgICAgICBhZFNpdGUuc2hvd0NvbW1pdHRlZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2l0ZWNvbnRyb2xsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zaG93QWxsQ29tbWl0dGVlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuY29tbWl0dGVlRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuY29tbWl0dGVlRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLmNvbW1pdHRlZUVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkU2l0ZS5jb21taXR0ZWVMaXN0ID0gcmVzcG9uc2UuZGF0YS5jb21taXR0ZWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkU2l0ZS5jb21taXR0ZWVFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLmNvbW1pdHRlZUVycm9yTXNnID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBpbmRpdmlkdWFsIGNvbW1pdHRlZS5cbiAgICAgICAgICAgICAgICBhZFNpdGUucmVtb3ZlTGlzdCA9IChjb21taXR0ZWVJZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzaXRlY29udHJvbGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNvbW1pdHRlZShjb21taXR0ZWVJZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChyZXNwb25zZS5kYXRhLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLnNob3dDb21taXR0ZWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3dlbGNvbWUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvc2lnbmluJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7Il19
