"use strict";!function(){angular.module("nbaslp",["ngResource","ngRoute","720kb.datepicker"]).config(["$routeProvider","$locationProvider",function(l,e){l.when("/",{templateUrl:"home/welcome/welcome.view.html",controller:"welcomeCtrl",controllerAs:"wvm"}).when("/councilmembers",{templateUrl:"councilmembers/councilmembers.view.html",controller:"councilCtrl",controllerAs:"clvm"}).when("/signup",{templateUrl:"signup/signup.view.html",controller:"signupCtrl",controllerAs:"regvm"}).when("/signin",{templateUrl:"signin/signin.view.html",controller:"signinCtrl",controllerAs:"lvm"}).when("/profile",{templateUrl:"profile/profile.view.html",controller:"profileCtrl",controllerAs:"provm"}).when("/help",{templateUrl:"help/help.view.html",controller:"helpCtrl",controllerAs:"hvm"}).when("/sitecontroll",{templateUrl:"admin/sitecontroll/sitecontroll.view.html",controller:"sitecontrollCtrl",controllerAs:"adSite"}).when("/usercontroll",{templateUrl:"admin/usercontroll/usercontroll.view.html",controller:"usercontrollCtrl",controllerAs:"uservm"}).when("/staffcontroll",{templateUrl:"admin/staffcontroll/staffcontroll.view.html",controller:"staffCtrl",controllerAs:"svm"}).when("/welcome",{templateUrl:"welcome/welcome.view.html",controller:"welcomeCtrl",controllerAs:"wvm"}).when("/committees",{templateUrl:"committees/committees.view.html",controller:"committeesCtrl",controllerAs:"cvm"}).when("/events",{templateUrl:"events/events.view.html",controller:"eventsCtrl",controllerAs:"evm"}).when("/aboutus",{templateUrl:"aboutus/aboutus.view.html",controller:"aboutusCtrl",controllerAs:"abvm"}).when("/contactus",{templateUrl:"contactus/contactus.view.html",controller:"contactusCtrl",controllerAs:"cvm"}),e.html5Mode({enabled:!0})}])}();
"use strict";function authentication(n,t){var e=function(t){n.localStorage.nbaslp=t},c=function(){return n.localStorage.nbaslp},a=function(){var t=c(),e=void 0;return!!t&&(e=t.split(".")[1],e=n.atob(e),e=JSON.parse(e))},u=function(n){return n},o=function(n){return n};return{currentUser:function(){if(a){var t=c().split(".")[1];return t=n.atob(t),{userId:(t=JSON.parse(t))._id,email:t.email,accountStatus:t.accountStatus,accountType:t.accountType,accountId:t.userId,name:t.name}}return!1},saveToken:e,getToken:c,isLoggedIn:a,signUp:function(n){return t.post("/api/signup",n).success(function(n){e(n.token)})},signIn:function(n){return t.post("/api/signin",n).success(function(n){e(n.token)})},checkUser:function(n){return t.post("/api/checkuser",n).then(u).catch(o)},countUser:function(n){return t.get("/api/"+n+"/count").then(u).catch(o)},verifyKey:function(n,e){return t.get("/api/"+n+"/"+e+"/verify").then(u).catch(o)},changePassword:function(n){return t.post("/api/changepassword",n).then(u).catch(o)},Logout:function(){n.localStorage.removeItem("nbaslp")}}}angular.module("nbaslp").service("authentication",authentication),authentication.$inject=["$window","$http"];
"use strict";!function(){function t(t,n){var e=function(t){return t},a=function(t){return t};return{resetPassword:function(t,c){return n.post("/api/"+t+"/resetpassword",c).then(e).catch(a)},uploadTellerDocs:function(t,c){return n.post("/api/"+t+"/bankteller",c).then(e).catch(a)},createActivationCode:function(t){return n.post("/api/"+t+"/generatevalidationcode").then(e).catch(a)},validateActivationCode:function(t,c){return n.post("/api/"+t+"/"+c+"/validate").then(e).catch(a)},getAccountStatuses:function(t){return n.get("/api/"+t+"/statuses").then(e).catch(a)},updateUserStatus:function(t){return n.post("/api/userstatus",t).then(e).catch(a)},saveBasicInfo:function(t){return n.post("/api/createbasicprofile",t).then(e).catch(a)},editBasicInfo:function(t,c){return n.put("/api/"+t+"/editbasicinfo",c).then(e).catch(a)},saveBranchInfo:function(t,c){return n.post("/api/"+t+"/savebranchinfo",c).then(e).catch(a)},editBranchInfo:function(t,c){return n.put("/api/"+t+"/branch",c).then(e).catch(a)},loadUserInfo:function(t,c){return n.get("/api/"+c+"/"+t+"/userinfo").then(e).catch(a)},getCommittee:function(){return n.get("/api/showcommittee").then(e).catch(a)},saveBankTeller:function(t){return n.post("/api/savebankteller",t).then(e).catch(a)},getBankTeller:function(t){return n.get("/api/"+t+"/bankteller").then(e).catch(a)},approveTeller:function(t){return n.put("/api/bankteller",t).then(e).catch(a)}}}angular.module("nbaslp").service("account",t),t.$inject=["$window","$http"]}();
"use strict";!function(){function t(t){var e=function(t){return t},n=function(t){return t};return{addPreferredCommittee:function(c){return t.post("/api/createcommittee",c).then(e).catch(n)},showAllCommittee:function(){return t.get("/api/showcommittee").then(e).catch(n)},removeCommittee:function(c){return t.delete("/api/"+c+"/removecommittee").then(e).catch(n)},addCouncil:function(c){return t.post("/api/councilmember",c).then(e).catch(n)},showCouncilMember:function(){return t.get("/api/showcouncil").then(e).catch(n)},removeCouncil:function(c){return t.delete("/api/"+c+"/council").then(e).catch(n)},addEvent:function(c){return t.post("/api/event",c).then(e).catch(n)},showEvent:function(){return t.get("/api/showEvent").then(e).catch(n)},removeEvent:function(c){return t.delete("/api/"+c+"/event").then(e).catch(n)}}}angular.module("nbaslp").service("sitecontroller",t),t.$inject=["$http"]}();
"use strict";!function(){function e(e){var t=function(e){return e},n=function(e){return e};return{showMembers:function(){return e.get("/api/members").then(t).catch(n)},showSingleMember:function(r){return e.get("/api/"+r+"/member").then(t).catch(n)},showMemberProfile:function(r){return e.get("/api/"+r+"/profile").then(t).catch(n)},showMemberBranch:function(r){return e.get("/api/"+r+"/branch").then(t).catch(n)},filterAction:function(r,c){return e.get("/api/"+r+"/"+c).then(t).catch(n)}}}angular.module("nbaslp").service("usercontroller",e),e.$inject=["$http"]}();
"use strict";!function(){function r(r,e,o,a){var l=this;l.approveProcess=!1,l.approveEdit=!1,l.alluser=!0,l.initialTitle="List of all user",l.paidMemberControl=!1,l.loadUserList=function(){l.alluser=!0,l.paidMemberControl=!1,l.initialTitle="List of all user",r.showMembers().then(function(r){r.data.error?(l.showMemberError=!0,l.showMemberErrorMsg=r.data.error):l.members=r.data.members}).catch(function(r){l.showMemberError=!0,l.showMemberErrorMsg=r})},l.loadPaidMember=function(e,o){l.alluser=!1,l.paidMemberControl=!0,l.initialTitle="List Of Only Paid User(s)";var a=o,n=e;r.filterAction(a,n).then(function(r){r.data.error?(l.loadPaidMemberError=!0,l.loadPaidMemberErrorMsg=r.data.error):(l.loadPaidMemberError=!1,l.paidListUsers=r.data.verifiedUsers)}).catch(function(r){l.loadPaidMemberError=!0,l.loadPaidMemberErrorMsg=r})},l.filterControll=function(r,e){"alluser"===r?l.loadUserList():"paid"===r&&l.loadPaidMember(r,e)},l.checkRoutes=function(){o.v?l.clickedMemberName=!0:l.clickedMemberName=!1},l.loadUserInfo=function(){var e=o.v;r.showSingleMember(e).then(function(r){r.data.error?(l.singleMemberLoadingError=!0,l.singleMemberLoadingErrorMsg=r.data.error):(l.singleMemberLoadingError=!1,l.singleMember=r.data.member)}).catch(function(r){l.singleMemberLoadingError=!0,l.singleMemberLoadingErrorMsg=r})},l.loadUserProfile=function(){var e=o.v;r.showMemberProfile(e).then(function(r){r.data.error?(l.profileLoadingError=!0,l.profileLoadingErrorMsg=r.data.error):(l.profileLoadingError=!1,l.memberProfile=r.data.profile)}).catch(function(r){l.profileLoadingError=!0,l.profileLoadingErrorMsg=r})},l.loadUserBranch=function(){var e=o.v;r.showMemberBranch(e).then(function(r){r.data.error?(l.branchLoadingError=!0,l.branchLoadingErrorMsg=r.data.error):(l.branchLoadingError=!1,l.memberBranch=r.data.branch)}).catch(function(r){l.branchLoadingError=!0,l.branchLoadingErrorMsg=r})},l.loadBankTeller=function(){var r=o.v;e.getBankTeller(r).then(function(r){r.data.error?(l.bankTellerLoadingError=!0,l.bankTellerLoadingErrorMsg=r.data.error):null===r.data.bankTeller?(l.bankTellerLoadingError=!0,l.bankTellerLoadingErrorMsg="This user has not uploaded any bank teller yet"):(l.bankTellerLoadingError=!1,l.memberbankTeller=r.data.bankTeller,!1===r.data.bankTeller.tellerApproved&&"valid till date"===r.data.bankTeller.tellerValidTill?l.approveProcess=!0:l.approveEdit=!0)}).catch(function(r){l.bankTellerLoadingError=!0,l.bankTellerLoadingErrorMsg=r})},l.tellerApproved={validTill:"",valid:"",whos:o.v},l.approveTeller=function(){e.approveTeller(l.tellerApproved).then(function(r){r.data.error?(l.tellerApprovedError=!0,l.tellerApprovedErrorMsg=r.data.error):(l.tellerApprovedError=!1,a.reload())}).catch(function(r){l.tellerApprovedError=!0,l.tellerApprovedErrorMsg=r})},l.editBankTellerApproving=function(){l.approveEdit=!1,l.approveProcess=!0},l.cancelTellerSubmission=function(){l.approveEdit=!0,l.approveProcess=!1}}angular.module("nbaslp").controller("usercontrollCtrl",r),r.$inject=["usercontroller","account","$routeParams","$route"]}();
"use strict";!function(){function n(n,t){n.isLoggedIn()?"admin"===n.currentUser().accountType||t.path("/welcome"):t.path("/signin")}angular.module("nbaslp").controller("staffCtrl",n),n.$inject=["authentication","$location"]}();
"use strict";!function(){function n(n){var t=function(n){return n},e=function(n){return n};return{sendContactMessage:function(r){return n.post("/api/sendmessage",r).then(t).catch(e)}}}angular.module("nbaslp").service("systemService",n),n.$inject=["$http"]}();
"use strict";!function(){angular.module("nbaslp").directive("siteNav",function(){return{restrict:"EA",templateUrl:"common/directives/nav/site-nav.template.html",controller:"navCtrl as nvm"}})}();
"use strict";!function(){function n(n,t){var o=this;n.isLoggedIn()?(o.loggedInUri=!0,o.loggedInName=n.currentUser().name,o.currentAccountType=n.currentUser().accountType):o.loggedInUri=!1,o.logout=function(){n.Logout(),t.path("/signin")}}angular.module("nbaslp").controller("navCtrl",n),n.$inject=["authentication","$location"]}();
"use strict";!function(){angular.module("nbaslp").directive("siteFooter",function(){return{restrict:"EA",templateUrl:"common/directives/footer/footer.template.html"}})}();
"use strict";!function(){function n(n){return{restrict:"A",link:function(i,e,t){var c=n(t.fileModel).assign;e.on("change",function(){i.$apply(function(){c(i,e[0].files[0])})})}}}angular.module("nbaslp").directive("fileModel",n),n.$inject=["$parse"]}();
"use strict";!function(){angular.module("nbaslp").directive("sideBar",function(){return{restrict:"EA",templateUrl:"common/directives/sidebar/sidebar.template.html"}})}();
"use strict";!function(){angular.module("nbaslp").controller("welcomeCtrl",function(){})}();
"use strict";!function(){function t(t){var o=this;o.loadCommittee=function(){t.showAllCommittee().then(function(t){t.data.error?(o.committeeLoadingError=!0,o.committeeLoadingErrorMsg=t.data.error):(o.committeeLoadingError=!1,o.committees=t.data.committee)}).catch(function(t){o.committeeLoadingError=!0,o.committeeLoadingErrorMsg=t})}}angular.module("nbaslp").controller("committeesCtrl",t),t.$inject=["sitecontroller"]}();
"use strict";!function(){function o(o){var r=this;r.loadCouncilMembers=function(){o.showCouncilMember().then(function(o){console.log(o),o.data.error?(r.committeeLoadingError=!0,r.committeeLoadingErrorMsg=o.data.error):(r.committeeLoadingError=!1,r.councils=o.data.data)}).catch(function(o){r.committeeLoadingError=!0,r.committeeLoadingErrorMsg=o})}}angular.module("nbaslp").controller("councilCtrl",o),o.$inject=["sitecontroller"]}();
"use strict";!function(){function e(e){var n=this;n.showEvents=function(){e.showEvent().then(function(e){e.data.error?(n.eventLoadError=!0,n.eventLoadErrorMsg=e.data.error):(n.eventLoadError=!1,n.events=e.data.events,n.events.length>0?n.noEvent=!1:n.noEvent=!0)}).catch(function(e){n.eventLoadError=!0,n.eventLoadErrorMsg=e})}}angular.module("nbaslp").controller("eventsCtrl",e),e.$inject=["sitecontroller"]}();
"use strict";!function(){angular.module("nbaslp").controller("aboutusCtrl",function(){})}();
"use strict";!function(){function e(e){var s=this;s.contact={name:"",email:"",message:""},s.contactUs=function(){e.sendContactMessage(s.contact).then(function(e){e.data.error?(s.sendMessageError=!0,s.sendMessageErrorMsg=e.data.error):(s.sendMessageSuccess=!0,s.sendMessageSuccessMsg="We have received your message. We will be in touch with you soon")}).catch(function(e){s.sendMessageError=!0,s.sendMessageErrorMsg=e})}}angular.module("nbaslp").controller("contactusCtrl",e),e.$inject=["systemService"]}();
"use strict";!function(){function r(r,t){var o=this;o.user={firstName:"",lastName:"",displayName:"",email:"",password:"",confirmPassword:""},o.register=function(){r.signUp(o.user).then(function(r){r.data.error?(o.RegistrationError=!0,o.RegistrationErrorMsg=r.data.error):(o.RegistrationError=!1,t.path("/welcome"))}).catch(function(r){r&&(o.RegistrationError=!0,o.RegistrationErrorMsg=r.data.error)})},r.isLoggedIn()&&t.path("/welcome")}angular.module("nbaslp").controller("signupCtrl",r),r.$inject=["authentication","$location"]}();
"use strict";!function(){function r(r,o){var n=this;n.user={email:"",password:""},r.isLoggedIn()?o.path("/welcome"):(n.login=function(){n.user.email&&n.user.password?(n.loginError=!1,n.doLogin()):(n.loginError=!0,n.loginErrorMsg="Error! all * fields are required")},n.doLogin=function(){r.signIn(n.user).error(function(r){n.loginError=!0,n.loginErrorMsg=r.error}).then(function(){o.path("/welcome")})})}angular.module("nbaslp").controller("signinCtrl",r),r.$inject=["authentication","$location"]}();
"use strict";!function(){function r(r,a,o,e,t){var n=this;n.resetpassword={password:"",repeat_password:"",new_password:""},n.resetPassword=function(){e.resetPassword(a.currentUser().email,n.resetpassword).then(function(r){r.data.error?(n.resetPasswordError=!0,n.resetPasswordErrorMsg=r.data.error):(n.resetPasswordError=!1,n.resetSuccess=!0,setTimeout(function(){a.Logout(),t.reload()},200))}).catch(function(r){n.resetPasswordError=!0,n.resetPasswordErrorMsg=r})},a.isLoggedIn()?(n.currentAccountType=a.currentUser().accountType,"customer"===a.currentUser().accountType?(n.profileStatus=a.currentUser().accountStatus,n.codeReady=!1,n.basicProfileEditOn=!1,n.branchInfoEditOn=!1,n.sendActivationCode=function(){n.codeReady=!0,e.createActivationCode(a.currentUser().email).then(function(r){if(r.data.error)n.activationCodeError=!0,n.activationCodeErrorMsg=r.data.error;else{var o={update_at:"profileActivationMail",email:a.currentUser().email,status:!0};c=o,e.updateUserStatus(c).then(function(r){!0===r.data.updated?(n.statusUpdateError=!1,t.reload()):(n.basicAccountInfoError=!0,n.basicAccountInfoErrorMsg=r.data.error)}).catch(function(r){n.statusUpdateError=!0,n.basicAccountInfoErrorMsg=r}),n.codeReady=!1,n.activationCodeError=!1}var c}).catch(function(r){n.activationCodeError=!0,n.activationCodeErrorMsg=r})},n.getProfileStatuses=function(){e.getAccountStatuses(a.currentUser().email).then(function(r){r.data.error?(n.statusLoadError=!0,n.statusLoadErrorMsg=r.data.error):(n.statusLoadError=!1,n.userStatuses=r.data.statuses)}).catch(function(r){n.statusLoadError=!0,n.statusLoadErrorMsg=r})},n.basicProfile={whos:a.currentUser().email,userId:a.currentUser().userId,formerName:"",sex:"",tele:"",address:""},n.saveBasicInfo=function(){e.saveBasicInfo(n.basicProfile).then(function(r){if(r.data.error)n.basicAccountInfoError=!0,n.basicAccountInfoErrorMsg=r.data.error;else{var o={update_at:"basic_info",email:a.currentUser().email,status:!0};e.updateUserStatus(o).then(function(r){!0===r.data.updated?(n.statusUpdateError=!1,t.reload()):(n.basicAccountInfoError=!0,n.basicAccountInfoErrorMsg=r.data.error)}).catch(function(r){n.statusUpdateError=!0,n.basicAccountInfoErrorMsg=r})}}).catch(function(r){})},n.branch={year:"",branch:""},n.saveBatchInfo=function(){e.saveBranchInfo(a.currentUser().email,n.branch).then(function(r){if(r.data.error)n.branchInfoError=!0,n.branchInfoErrorMsg=r.data.error;else if(r.data.success){n.branchInfoError=!1;var o={update_at:"branch",email:a.currentUser().email,status:!0};e.updateUserStatus(o).then(function(r){!0===r.data.updated?(n.branchInfoError=!1,t.reload()):(n.branchInfoError=!0,n.branchInfoErrorMsg=r.data.error)}).catch(function(r){n.branchInfoError=!0,n.branchInfoErrorMsg=r})}}).catch(function(r){n.branchInfoError=!0,n.branchInfoErrorMsg=r})},n.loadBasicInfo=function(r){e.loadUserInfo(r,a.currentUser().email).then(function(r){r.data.error?(n.userBasicInfoLoadingError=!0,n.userBasicInfoLoadingErrorMsg=r.data.error):(n.userBasicInfoLoadingError=!1,n.basicInfo=r.data.userInfo)}).catch(function(r){n.userBasicInfoLoadingError=!0,n.userBasicInfoLoadingErrorMsg=r})},n.editBasicInfo=function(r){n.basicProfileEditOn=!0,n.editBasic={name:n.basicInfo.formerName,sex:n.basicInfo.sex,address:n.basicInfo.address,tele:n.basicInfo.telephone},n.SaveEditBasicInfo=function(){e.editBasicInfo(r,n.editBasic).then(function(r){r.data.error?(n.editBasicInfoError=!0,n.editBasicInfoErrorMsg=r.data.error):(n.editBasicInfoError=!1,t.reload())}).catch(function(r){n.editBasicInfoError=!0,n.editBasicInfoErrorMsg=r})}},n.cancleBasicEdit=function(){n.basicProfileEditOn=!1},n.getCommittee=function(){e.getCommittee().then(function(r){n.committees=r.data.committee}).catch(function(r){console.log(r)})},n.loadUserBranch=function(r){e.loadUserInfo(r,a.currentUser().email).then(function(r){r.data.error?(n.userInfoLoadingError=!0,n.userInfoLoadingErrorMsg=r.data.error):(n.userInfoLoadingError=!1,n.branchInfo=r.data.userInfo)}).catch(function(r){n.userInfoLoadingError=!0,n.userInfoLoadingErrorMsg=r})},n.editBranchInfo=function(r){n.branchInfoEditOn=!0,n.editBranch={baryear:n.branchInfo.barYear,branch:n.branchInfo.nbaBranch},n.saveEditBranchInfo=function(){e.editBranchInfo(r,n.editBranch).then(function(r){r.data.error?(n.editBranchInfoError=!0,n.editBranchInfoErrorMsg=r.data.error):(n.editBranchInfoError=!1,t.reload())}).catch(function(r){n.editBranchInfoError=!0,n.editBranchInfoErrorMsg=r})}},n.cancelEditBranchInfo=function(){n.branchInfoEditOn=!1},n.activation={code:""},n.activeProfile=function(){e.validateActivationCode(a.currentUser().email,n.activation.code).then(function(r){r.data.error?(n.ActivationError=!0,n.ActivationErrorMsg=r.data.error):r.data.success&&(n.activationSuccess=!0,setTimeout(function(){a.Logout(),t.reload()},3e3))}).catch(function(r){n.ActivationError=!0,n.ActivationErrorMsg=r})},n.bankTellerInfo={preferredCommittee:"",additional_committee:"",bank:"",branch:"",depositor:"",depositor_tel:"",tellerno:"",amount:"",datedeposit:"",userId:a.currentUser().accountId},n.saveBankTellerInfo=function(){e.uploadTellerDocs(a.currentUser().email,n.bankTellerInfo).then(function(r){if(r.data.error)n.saveTellerError=!0,n.saveTellerErrorMsg=r.data.error;else{n.saveTellerError=!1;var o={update_at:"bankteller",email:a.currentUser().email,status:!0};e.updateUserStatus(o).then(function(r){!0===r.data.updated?(n.branchInfoError=!1,t.reload()):(n.branchInfoError=!0,n.branchInfoErrorMsg=r.data.error)}).catch(function(r){n.branchInfoError=!0,n.branchInfoErrorMsg=r})}}).catch(function(r){n.saveTellerError=!0,n.saveTellerErrorMsg=r})},n.getCurrentBankTeller=function(){e.getBankTeller(a.currentUser().email).then(function(r){console.log("teller",r),r.data.error?(n.bankTellerLoadingError=!0,n.bankTellerLoadingErrorMsg=r.data.error):(n.bankTellerLoadingError=!1,n.userBankTeller=r.data.bankTeller)}).catch(function(r){n.bankTellerLoadingError=!0,n.bankTellerLoadingErrorMsg=r})}):a.currentUser().accountType):o.path("/signin")}angular.module("nbaslp").controller("profileCtrl",r),r.$inject=["$scope","authentication","$location","account","$route"]}();
"use strict";!function(){function n(n,t){}angular.module("nbaslp").controller("welcomeCtrl",n),n.$inject=["authentication","$location"]}();
"use strict";!function(){function r(r,e){var s=this;s.checkUserForm=!0,s.PasswordresetForm=!1,s.verifyAjaxLoader=!1,s.showPassResetForm=!1,s.checkingRoute=function(){e.current.params&&"forgot_password"===e.current.params.v?(s.PasswordresetForm=!1,s.user={email:""},s.checkUser=function(){r.checkUser(s.user).then(function(r){r.data.error?(s.userCheckingError=!0,s.userCheckingErrorMsg=r.data.error):r.data.security?(s.userCheckingError=!0,s.userCheckingErrorMsg="If you have account with us, we have sent you password reset link"):s.userCheckingError=!1}).catch(function(r){s.userCheckingError=!0,s.userCheckingErrorMsg=r})}):e.current.params&&e.current.params.r&&e.current.params.u&&(s.PasswordresetForm=!0,s.checkUserForm=!1,s.verifyAjaxLoader=!0,s.varifyUserDetails(),s.changePasswordInfo={key:e.current.params.r,user:e.current.params.u,newpassword:"",repeatpassword:""},s.changePassword=function(){r.changePassword(s.changePasswordInfo).then(function(r){console.log(r),r.data.error?(s.changePassError=!0,s.changePassErrorMsg=r.data.error):s.changePassError=!1}).catch(function(r){s.changePassError=!0,s.changePassErrorMsg=r})})},s.varifyUserDetails=function(){r.countUser(e.current.params.u).then(function(a){a.data.error?(s.userVerificationUserError=!0,s.userVerificationUserErrorMsg=a.data.error,s.verifyAjaxLoader=!1):r.verifyKey(e.current.params.u,e.current.params.r).then(function(r){r.data.error?(s.userVerificationUserError=!0,s.userVerificationUserErrorMsg=r.data.error):(s.userVerificationUserError=!1,s.showPassResetForm=!0,s.verifyAjaxLoader=!1)}).catch(function(r){s.userVerificationUserError=!0,s.userVerificationUserErrorMsg=r})}).catch(function(r){s.userVerificationUserError=!0,s.userVerificationUserErrorMsg=r,s.verifyAjaxLoader=!1})}}angular.module("nbaslp").controller("helpCtrl",r),r.$inject=["authentication","$route"]}();
"use strict";!function(){function t(t,o,e){var r=this;t.isLoggedIn()?"admin"===t.currentUser().accountType?(r.committee={name:""},r.addPreferredCommittee=function(){e.addPreferredCommittee(r.committee).then(function(t){t.data.error?(r.addCommitteeError=!0,r.addCommitteeErrorMsg=t.data.error):(r.addCommitteeError=!1,r.addCommitteeSuccessMsg="Committee successfully added",setTimeout(function(){r.showCommittee()},200))}).catch(function(t){r.addCommitteeError=!0,r.addCommitteeErrorMsg=t})},r.showCommittee=function(){e.showAllCommittee().then(function(t){t.data.error?(r.committeeError=!0,r.committeeErrorMsg=t.data.error):(r.committeeError=!1,r.committeeList=t.data.committee)}).catch(function(t){r.committeeError=!0,r.committeeErrorMsg=t})},r.removeList=function(t){e.removeCommittee(t).then(function(t){t.data.error?alert(t.data.error):setTimeout(function(){r.showCommittee()},100)}).catch(function(t){alert(t)})},r.council={name:""},r.addCouncilMember=function(){e.addCouncil(r.council).then(function(t){t.data.error?(r.councilAddError=!0,r.councilAddErrorMsg=t.data.error):(r.councilAddError=!1,setTimeout(function(){r.showCouncil()},100))}).catch(function(t){r.councilAddError=!0,r.councilAddErrorMsg=t})},r.showCouncil=function(){e.showCouncilMember().then(function(t){t.data.error?(r.councilShowError=!0,r.councilShowErrorMsg=t.data.error):(r.councilShowError=!1,r.councils=t.data.data)}).catch(function(t){r.councilShowError=!0,r.councilShowErrorMsg=t})},r.removeCouncil=function(t){e.removeCouncil(t).then(function(t){setTimeout(function(){r.showCouncil()},100)}).catch(function(t){alert(t)})},r.event={eventTitle:"",eventDetails:"",eventStarts:"",eventEnds:""},r.addEvent=function(){e.addEvent(r.event).then(function(t){t.data.error?(r.eventAddError=!0,r.eventAddErrorMsg=t.data.error):t.data.success&&(r.eventAddError=!1,r.eventAddSuccess=!0,setTimeout(function(){r.showEvent()},200))}).catch(function(t){r.eventAddError=!0,r.eventAddErrorMsg=t})},r.showEvent=function(){e.showEvent().then(function(t){t.data.error?(r.showEventError=!0,r.showEventErrorMsg=t.data.error):t.data.success&&(r.showEventError=!1,r.events=t.data.events)}).catch(function(t){r.showEventError=!0,r.showEventErrorMsg=t})},r.removeEvent=function(t){e.removeEvent(t).then(function(t){t.data.error?(r.showEventError=!0,r.showEventErrorMsg=t.data.error):t.data.success&&setTimeout(function(){r.showEvent()},100)}).catch(function(t){console.log(t)})}):o.path("/welcome"):o.path("/signin")}angular.module("nbaslp").controller("sitecontrollCtrl",t),t.$inject=["authentication","$location","sitecontroller"]}();
"use strict";$(document).ready(function(){$("#checkUser").focus(),$(".user-list-controll li a").on("click",function(){})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
