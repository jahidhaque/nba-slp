"use strict";!function(){angular.module("nbaslp",["ngResource","ngRoute","720kb.datepicker"]).config(["$routeProvider","$locationProvider",function(e,l){e.when("/",{templateUrl:"home/welcome/welcome.view.html",controller:"welcomeCtrl",controllerAs:"wvm"}).when("/councilmembers",{templateUrl:"councilmembers/councilmembers.view.html"}).when("/signup",{templateUrl:"signup/signup.view.html",controller:"signupCtrl",controllerAs:"regvm"}).when("/signin",{templateUrl:"signin/signin.view.html",controller:"signinCtrl",controllerAs:"lvm"}).when("/profile",{templateUrl:"profile/profile.view.html",controller:"profileCtrl",controllerAs:"provm"}).when("/help",{templateUrl:"help/help.view.html",controller:"helpCtrl",controllerAs:"hvm"}).when("/sitecontroll",{templateUrl:"admin/sitecontroll/sitecontroll.view.html",controller:"sitecontrollCtrl",controllerAs:"adSite"}).when("/usercontroll",{templateUrl:"admin/usercontroll/usercontroll.view.html",controller:"usercontrollCtrl",controllerAs:"uservm"}).when("/welcome",{templateUrl:"welcome/welcome.view.html",controller:"welcomeCtrl",controllerAs:"wvm"}).when("/committees",{templateUrl:"committees/committees.view.html",controller:"committeesCtrl",controllerAs:"cvm"}).when("/events",{templateUrl:"events/events.view.html",controller:"eventsCtrl",controllerAs:"evm"}).when("/aboutus",{templateUrl:"aboutus/aboutus.view.html",controller:"aboutusCtrl",controllerAs:"abvm"}).when("/contactus",{templateUrl:"contactus/contactus.view.html",controller:"contactusCtrl",controllerAs:"cvm"}),l.html5Mode({enabled:!0})}])}();
"use strict";function authentication(n,t){var e=function(t){n.localStorage.nbaslp=t},a=function(){return n.localStorage.nbaslp},o=function(){var t=a(),e=void 0;return!!t&&(e=t.split(".")[1],e=n.atob(e),e=JSON.parse(e))};return{currentUser:function(){if(o){var t=a().split(".")[1];return t=n.atob(t),t=JSON.parse(t),{userId:t._id,email:t.email,accountStatus:t.accountStatus,accountType:t.accountType,accountId:t.userId,name:t.name}}return!1},saveToken:e,getToken:a,isLoggedIn:o,signUp:function(n){return t.post("/api/signup",n).success(function(n){e(n.token)})},signIn:function(n){return t.post("/api/signin",n).success(function(n){e(n.token)})},Logout:function(){n.localStorage.removeItem("nbaslp")}}}angular.module("nbaslp").service("authentication",authentication),authentication.$inject=["$window","$http"];
"use strict";!function(){function t(t,e){var n=function(t){return t},a=function(t){return t};return{uploadTellerDocs:function(t,c){var r=new FormData;return r.append("tellerDoc",t),e.post("/api/docupload/"+c,r,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).then(n).catch(a)},createActivationCode:function(t){return e.post("/api/"+t+"/generatevalidationcode").then(n).catch(a)},validateActivationCode:function(t,c){return e.post("/api/"+t+"/"+c+"/validate").then(n).catch(a)},getAccountStatuses:function(t){return e.get("/api/"+t+"/statuses").then(n).catch(a)},updateUserStatus:function(t){return e.post("/api/userstatus",t).then(n).catch(a)},saveBasicInfo:function(t){return e.post("/api/createbasicprofile",t).then(n).catch(a)},saveBranchInfo:function(t,c){return e.post("/api/"+t+"/savebranchinfo",c).then(n).catch(a)},loadUserInfo:function(t,c){return e.get("/api/"+c+"/"+t+"/userinfo").then(n).catch(a)},getCommittee:function(){return e.get("/api/showcommittee").then(n).catch(a)},saveBankTeller:function(t){return e.post("/api/savebankteller",t).then(n).catch(a)},getBankTeller:function(t){return e.get("/api/"+t+"/bankteller").then(n).catch(a)}}}angular.module("nbaslp").service("account",t),t.$inject=["$window","$http"]}();
"use strict";!function(){function t(t){var e=function(t){return t},n=function(t){return t};return{addPreferredCommittee:function(r){return t.post("/api/createcommittee",r).then(e).catch(n)},showAllCommittee:function(){return t.get("/api/showcommittee").then(e).catch(n)},removeCommittee:function(r){return t.delete("/api/"+r+"/removecommittee").then(e).catch(n)},addEvent:function(r){return t.post("/api/event",r).then(e).catch(n)},showEvent:function(){return t.get("/api/showEvent").then(e).catch(n)},removeEvent:function(r){return t.delete("/api/"+r+"/event").then(e).catch(n)}}}angular.module("nbaslp").service("sitecontroller",t),t.$inject=["$http"]}();
"use strict";!function(){function e(e){var n=function(e){return e},t=function(e){return e};return{showMembers:function(){return e.get("/api/members").then(n).catch(t)},showSingleMember:function(r){return e.get("/api/"+r+"/member").then(n).catch(t)},showMemberProfile:function(r){return e.get("/api/"+r+"/profile").then(n).catch(t)},showMemberBranch:function(r){return e.get("/api/"+r+"/branch").then(n).catch(t)}}}angular.module("nbaslp").service("usercontroller",e),e.$inject=["$http"]}();
"use strict";!function(){function r(r,e,o){var n=this;r.showMembers().then(function(r){r.data.error?(n.showMemberError=!0,n.showMemberErrorMsg=r.data.error):n.members=r.data.members}).catch(function(r){n.showMemberError=!0,n.showMemberErrorMsg=r}),n.checkRoutes=function(){o.v?n.clickedMemberName=!0:n.clickedMemberName=!1},n.loadUserInfo=function(){var e=o.v;r.showSingleMember(e).then(function(r){r.data.error?(n.singleMemberLoadingError=!0,n.singleMemberLoadingErrorMsg=r.data.error):(n.singleMemberLoadingError=!1,n.singleMember=r.data.member)}).catch(function(r){n.singleMemberLoadingError=!0,n.singleMemberLoadingErrorMsg=r})},n.loadUserProfile=function(){var e=o.v;r.showMemberProfile(e).then(function(r){r.data.error?(n.profileLoadingError=!0,n.profileLoadingErrorMsg=r.data.error):(n.profileLoadingError=!1,n.memberProfile=r.data.profile)}).catch(function(r){n.profileLoadingError=!0,n.profileLoadingErrorMsg=r})},n.loadUserBranch=function(){var e=o.v;r.showMemberBranch(e).then(function(r){r.data.error?(n.branchLoadingError=!0,n.branchLoadingErrorMsg=r.data.error):(n.branchLoadingError=!1,n.memberBranch=r.data.branch)}).catch(function(r){n.branchLoadingError=!0,n.branchLoadingErrorMsg=r})},n.loadBankTeller=function(){var r=o.v;e.getBankTeller(r).then(function(r){r.data.error?(n.bankTellerLoadingError=!0,n.bankTellerLoadingErrorMsg=r.data.error):(n.bankTellerLoadingError=!1,n.memberbankTeller=r.data.bankTeller)}).catch(function(r){n.bankTellerLoadingError=!0,n.bankTellerLoadingErrorMsg=r})}}angular.module("nbaslp").controller("usercontrollCtrl",r),r.$inject=["usercontroller","account","$routeParams"]}();
"use strict";!function(){function n(n){var t=function(n){return n},e=function(n){return n};return{sendContactMessage:function(r){return n.post("/api/sendmessage",r).then(t).catch(e)}}}angular.module("nbaslp").service("systemService",n),n.$inject=["$http"]}();
"use strict";!function(){angular.module("nbaslp").directive("siteNav",function(){return{restrict:"EA",templateUrl:"common/directives/nav/site-nav.template.html",controller:"navCtrl as nvm"}})}();
"use strict";!function(){function n(n,t){n.isLoggedIn()?(this.loggedInUri=!0,this.loggedInName=n.currentUser().name,this.currentAccountType=n.currentUser().accountType):this.loggedInUri=!1,this.logout=function(){n.Logout(),t.path("/signin")}}angular.module("nbaslp").controller("navCtrl",n),n.$inject=["authentication","$location"]}();
"use strict";!function(){angular.module("nbaslp").directive("siteFooter",function(){return{restrict:"EA",templateUrl:"common/directives/footer/footer.template.html"}})}();
"use strict";!function(){function n(n){return{restrict:"A",link:function(i,e,t){var c=n(t.fileModel).assign;e.on("change",function(){i.$apply(function(){c(i,e[0].files[0])})})}}}angular.module("nbaslp").directive("fileModel",n),n.$inject=["$parse"]}();
"use strict";!function(){angular.module("nbaslp").directive("sideBar",function(){return{restrict:"EA",templateUrl:"common/directives/sidebar/sidebar.template.html"}})}();
"use strict";!function(){angular.module("nbaslp").controller("welcomeCtrl",function(){})}();
"use strict";!function(){function t(t){var o=this;o.loadCommittee=function(){t.showAllCommittee().then(function(t){t.data.error?(o.committeeLoadingError=!0,o.committeeLoadingErrorMsg=t.data.error):(o.committeeLoadingError=!1,o.committees=t.data.committee)}).catch(function(t){o.committeeLoadingError=!0,o.committeeLoadingErrorMsg=t})}}angular.module("nbaslp").controller("committeesCtrl",t),t.$inject=["sitecontroller"]}();
"use strict";!function(){function e(e){var n=this;n.showEvents=function(){e.showEvent().then(function(e){e.data.error?(n.eventLoadError=!0,n.eventLoadErrorMsg=e.data.error):(n.eventLoadError=!1,n.events=e.data.events,n.events.length>0?n.noEvent=!1:n.noEvent=!0)}).catch(function(e){n.eventLoadError=!0,n.eventLoadErrorMsg=e})}}angular.module("nbaslp").controller("eventsCtrl",e),e.$inject=["sitecontroller"]}();
"use strict";!function(){angular.module("nbaslp").controller("aboutusCtrl",function(){})}();
"use strict";!function(){function e(e){var s=this;s.contact={name:"",email:"",message:""},s.contactUs=function(){e.sendContactMessage(s.contact).then(function(e){e.data.error?(s.sendMessageError=!0,s.sendMessageErrorMsg=e.data.error):(s.sendMessageSuccess=!0,s.sendMessageSuccessMsg="We have received your message. We will be in touch with you soon")}).catch(function(e){s.sendMessageError=!0,s.sendMessageErrorMsg=e})}}angular.module("nbaslp").controller("contactusCtrl",e),e.$inject=["systemService"]}();
"use strict";!function(){function r(r,t){var o=this;o.user={firstName:"",lastName:"",displayName:"",email:"",password:"",confirmPassword:""},o.register=function(){r.signUp(o.user).then(function(r){r.data.error?(o.RegistrationError=!0,o.RegistrationErrorMsg=r.data.error):(o.RegistrationError=!1,t.path("/welcome"))}).catch(function(r){r&&(o.RegistrationError=!0,o.RegistrationErrorMsg=r.data.error)})},r.isLoggedIn()&&t.path("/welcome")}angular.module("nbaslp").controller("signupCtrl",r),r.$inject=["authentication","$location"]}();
"use strict";!function(){function r(r,o){var n=this;n.user={email:"",password:""},r.isLoggedIn()?o.path("/welcome"):(n.login=function(){n.user.email&&n.user.password?(n.loginError=!1,n.doLogin()):(n.loginError=!0,n.loginErrorMsg="Error! all * fields are required")},n.doLogin=function(){r.signIn(n.user).error(function(r){n.loginError=!0,n.loginErrorMsg=r.error}).then(function(){o.path("/welcome")})})}angular.module("nbaslp").controller("signinCtrl",r),r.$inject=["authentication","$location"]}();
"use strict";!function(){function r(r,e,a,o,t){function n(r){o.updateUserStatus(r).then(function(r){!0===r.data.updated?(c.statusUpdateError=!1,t.reload()):(c.basicAccountInfoError=!0,c.basicAccountInfoErrorMsg=r.data.error)}).catch(function(r){c.statusUpdateError=!0,c.basicAccountInfoErrorMsg=r})}var c=this;e.isLoggedIn()?(c.currentAccountType=e.currentUser().accountType,"customer"===e.currentUser().accountType?(c.profileStatus=e.currentUser().accountStatus,c.codeReady=!1,c.sendActivationCode=function(){c.codeReady=!0,o.createActivationCode(e.currentUser().email).then(function(r){if(r.data.error)c.activationCodeError=!0,c.activationCodeErrorMsg=r.data.error;else{n({update_at:"profileActivationMail",email:e.currentUser().email,status:!0}),c.codeReady=!1,c.activationCodeError=!1}}).catch(function(r){c.activationCodeError=!0,c.activationCodeErrorMsg=r})},c.getProfileStatuses=function(){o.getAccountStatuses(e.currentUser().email).then(function(r){r.data.error?(c.statusLoadError=!0,c.statusLoadErrorMsg=r.data.error):(c.statusLoadError=!1,c.userStatuses=r.data.statuses)}).catch(function(r){c.statusLoadError=!0,c.statusLoadErrorMsg=r})},c.basicProfile={whos:e.currentUser().email,userId:e.currentUser().userId,formerName:"",sex:"",tele:"",address:""},c.saveBasicInfo=function(){o.saveBasicInfo(c.basicProfile).then(function(r){if(r.data.error)c.basicAccountInfoError=!0,c.basicAccountInfoErrorMsg=r.data.error;else{var a={update_at:"basic_info",email:e.currentUser().email,status:!0};o.updateUserStatus(a).then(function(r){!0===r.data.updated?(c.statusUpdateError=!1,t.reload()):(c.basicAccountInfoError=!0,c.basicAccountInfoErrorMsg=r.data.error)}).catch(function(r){c.statusUpdateError=!0,c.basicAccountInfoErrorMsg=r})}}).catch(function(r){})},c.branch={year:"",branch:""},c.saveBatchInfo=function(){o.saveBranchInfo(e.currentUser().email,c.branch).then(function(r){if(r.data.error)c.branchInfoError=!0,c.branchInfoErrorMsg=r.data.error;else if(r.data.success){c.branchInfoError=!1;var a={update_at:"branch",email:e.currentUser().email,status:!0};o.updateUserStatus(a).then(function(r){!0===r.data.updated?(c.branchInfoError=!1,t.reload()):(c.branchInfoError=!0,c.branchInfoErrorMsg=r.data.error)}).catch(function(r){c.branchInfoError=!0,c.branchInfoErrorMsg=r})}}).catch(function(r){c.branchInfoError=!0,c.branchInfoErrorMsg=r})},c.loadBasicInfo=function(r){o.loadUserInfo(r,e.currentUser().email).then(function(r){r.data.error?(c.userBasicInfoLoadingError=!0,c.userBasicInfoLoadingErrorMsg=r.data.error):(c.userBasicInfoLoadingError=!1,c.basicInfo=r.data.userInfo)}).catch(function(r){c.userBasicInfoLoadingError=!0,c.userBasicInfoLoadingErrorMsg=r})},c.getCommittee=function(){o.getCommittee().then(function(r){c.committees=r.data.committee}).catch(function(r){console.log(r)})},c.loadUserBranch=function(r){o.loadUserInfo(r,e.currentUser().email).then(function(r){r.data.error?(c.userInfoLoadingError=!0,c.userInfoLoadingErrorMsg=r.data.error):(c.userInfoLoadingError=!1,c.branchInfo=r.data.userInfo)}).catch(function(r){c.userInfoLoadingError=!0,c.userInfoLoadingErrorMsg=r})},c.activation={code:""},c.activeProfile=function(){o.validateActivationCode(e.currentUser().email,c.activation.code).then(function(r){r.data.error?(c.ActivationError=!0,c.ActivationErrorMsg=r.data.error):r.data.success&&(c.activationSuccess=!0,setTimeout(function(){e.Logout(),t.reload()},3e3))}).catch(function(r){c.ActivationError=!0,c.ActivationErrorMsg=r})},c.bankTellerInfo={preferredCommittee:"",additional_committee:"",whos:e.currentUser().email,userId:e.currentUser().accountId,tellerDoc:r.tellerDoc},c.saveBankTellerInfo=function(){c.bankTellerInfo.preferredCommittee&&c.bankTellerInfo.additional_committee?(console.log(c.bankTellerInfo),o.uploadTellerDocs(r.tellerDoc,e.currentUser().accountId).then(function(r){!1===r.data.success?(c.saveTellerError=!0,c.saveTellerErrorMsg=r.data.error):!0===r.data.success&&(c.bankTellerInfo.tellerDoc=r.data.docLocation,o.saveBankTeller(c.bankTellerInfo).then(function(r){if(r.data.error)c.saveTellerError=!0,c.saveTellerErrorMsg=r.data.error;else{n({update_at:"bankteller",email:e.currentUser().email,status:!0}),t.reload()}}).catch(function(r){c.saveTellerError=!0,c.saveTellerErrorMsg=r}))}).catch(function(r){c.saveTellerError=!0,c.saveTellerErrorMsg=r})):(c.saveTellerError=!0,c.saveTellerErrorMsg="All * fiends are required. Must not be empty")},c.getCurrentBankTeller=function(){o.getBankTeller(e.currentUser().email).then(function(r){r.data.error?(c.bankTellerLoadingError=!0,c.bankTellerLoadingErrorMsg=r.data.error):(c.bankTellerLoadingError=!1,c.userBankTeller=r.data.bankTeller)}).catch(function(r){c.bankTellerLoadingError=!0,c.bankTellerLoadingErrorMsg=r})}):e.currentUser().accountType):a.path("/signin")}angular.module("nbaslp").controller("profileCtrl",r),r.$inject=["$scope","authentication","$location","account","$route"]}();
"use strict";!function(){function n(n,t){}angular.module("nbaslp").controller("welcomeCtrl",n),n.$inject=["authentication","$location"]}();
"use strict";!function(){function t(t,e,r){var o=this;t.isLoggedIn()?"admin"===t.currentUser().accountType?(o.committee={name:"",councilMember:""},o.addPreferredCommittee=function(){r.addPreferredCommittee(o.committee).then(function(t){t.data.error?(o.addCommitteeError=!0,o.addCommitteeErrorMsg=t.data.error):(o.addCommitteeError=!1,o.addCommitteeSuccessMsg="Committee successfully added",setTimeout(function(){o.showCommittee()},200))}).catch(function(t){o.addCommitteeError=!0,o.addCommitteeErrorMsg=t})},o.showCommittee=function(){r.showAllCommittee().then(function(t){t.data.error?(o.committeeError=!0,o.committeeErrorMsg=t.data.error):(o.committeeError=!1,o.committeeList=t.data.committee)}).catch(function(t){o.committeeError=!0,o.committeeErrorMsg=t})},o.removeList=function(t){r.removeCommittee(t).then(function(t){t.data.error?alert(t.data.error):setTimeout(function(){o.showCommittee()},100)}).catch(function(t){alert(t)})},o.event={eventTitle:"",eventDetails:"",eventStarts:"",eventEnds:""},o.addEvent=function(){r.addEvent(o.event).then(function(t){t.data.error?(o.eventAddError=!0,o.eventAddErrorMsg=t.data.error):t.data.success&&(o.eventAddError=!1,o.eventAddSuccess=!0,setTimeout(function(){o.showEvent()},200))}).catch(function(t){o.eventAddError=!0,o.eventAddErrorMsg=t})},o.showEvent=function(){r.showEvent().then(function(t){t.data.error?(o.showEventError=!0,o.showEventErrorMsg=t.data.error):t.data.success&&(o.showEventError=!1,o.events=t.data.events)}).catch(function(t){o.showEventError=!0,o.showEventErrorMsg=t})},o.removeEvent=function(t){r.removeEvent(t).then(function(t){t.data.error?(o.showEventError=!0,o.showEventErrorMsg=t.data.error):t.data.success&&setTimeout(function(){o.showEvent()},100)}).catch(function(t){console.log(t)})}):e.path("/welcome"):e.path("/signin")}angular.module("nbaslp").controller("sitecontrollCtrl",t),t.$inject=["authentication","$location","sitecontroller"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImF1dGhlbnRpY2F0aW9uLnNlcnZpY2UuanMiLCJhY2NvdW50LnNlcnZpY2UuanMiLCJzaXRlLWNvbnRyb2xsZXIuc2VydmljZS5qcyIsInVzZXItY29udHJvbGxlci5zZXJ2aWNlLmpzIiwidXNlcmNvbnRyb2xsLmNvbnRyb2xsZXIuanMiLCJzeXN0ZW0uc2VydmljZS5qcyIsIm5hdi5kaXJlY3RpdmUuanMiLCJuYXYuY29udHJvbGxlci5qcyIsImZvb3Rlci5kaXJlY3RpdmUuanMiLCJmaWxlTW9kZWwuZGlyZWN0aXZlLmpzIiwic2lkZWJhci5kaXJlY3RpdmUuanMiLCJ3ZWxjb21lLmNvbnRyb2xsZXIuanMiLCJjb21taXR0ZWVzLmNvbnRyb2xsZXIuanMiLCJldmVudHMuY29udHJvbGxlci5qcyIsImFib3V0dXMuY29udHJvbGxlci5qcyIsImNvbnRhY3R1cy5jb250cm9sbGVyLmpzIiwic2lnbnVwLmNvbnRyb2xsZXIuanMiLCJzaWduaW4uY29udHJvbGxlci5qcyIsInByb2ZpbGUuY29udHJvbGxlci5qcyIsInNpdGVjb250cm9sbC5jb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCJ0ZW1wbGF0ZVVybCIsIiRsb2NhdGlvblByb3ZpZGVyIiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsIndoZW4iLCJodG1sNU1vZGUiLCJlbmFibGVkIiwic2F2ZVRva2VuIiwiJHdpbmRvdyIsInRva2VuIiwibG9jYWxTdG9yYWdlIiwiZ2V0VG9rZW4iLCJpc0xvZ2dlZEluIiwicGF5bG9hZCIsIkpTT04iLCJwYXJzZSIsImF0b2IiLCJjdXJyZW50VXNlciIsInNwbGl0IiwiYWNjb3VudFN0YXR1cyIsInVzZXJJZCIsIl9pZCIsImFjY291bnRUeXBlIiwiYWNjb3VudElkIiwibmFtZSIsIkxvZ291dCIsInNpZ25VcCIsInVzZXIiLCIkaHR0cCIsInBvc3QiLCJzdWNjZXNzIiwiZGF0YSIsInNpZ25JbiIsImhhbmRsZVN1Y2Nlc3MiLCJyZW1vdmVJdGVtIiwiYXV0aGVudGljYXRpb24iLCJjcmVhdGVBY3RpdmF0aW9uQ29kZSIsInJlc3BvbnNlIiwiaGFuZGxlRXJyb3IiLCJ1cGxvYWRUZWxsZXJEb2NzIiwiZmlsZSIsImxvYWRVc2VySW5mbyIsImZkIiwiYXBwZW5kIiwiaWRlbnRpdHkiLCJoZWFkZXJzIiwiQ29udGVudC1UeXBlIiwidW5kZWZpbmVkIiwiY2F0Y2giLCJ2YWxpZGF0ZUFjdGl2YXRpb25Db2RlIiwidGhlbiIsImNvZGUiLCJnZXRDb21taXR0ZWUiLCJnZXRBY2NvdW50U3RhdHVzZXMiLCJnZXQiLCJzYXZlQmFzaWNJbmZvIiwidXBkYXRlVXNlclN0YXR1cyIsInRyYW5zZm9ybVJlcXVlc3QiLCJzYXZlQmFua1RlbGxlciIsInNhdmVCcmFuY2hJbmZvIiwiY29sbGVjdGlvbk5hbWUiLCJ0ZWxsZXIiLCJnZXRCYW5rVGVsbGVyIiwiYWNjb3VudCIsIiRpbmplY3QiLCJhZGRQcmVmZXJyZWRDb21taXR0ZWUiLCJzaG93QWxsQ29tbWl0dGVlIiwiYWRkRXZlbnQiLCJyZW1vdmVDb21taXR0ZWUiLCJzaG93RXZlbnQiLCJkZWxldGUiLCJjb21taXR0ZWVJZCIsInJlbW92ZUV2ZW50IiwiZXZlbnQiLCJldmVudElkIiwic2l0ZWNvbnRyb2xsZXIiLCJzaG93TWVtYmVycyIsInNob3dTaW5nbGVNZW1iZXIiLCJtZW1iZXJJZCIsInNob3dNZW1iZXJCcmFuY2giLCJzaG93TWVtYmVyUHJvZmlsZSIsInVzZXJjb250cm9sbGVyIiwidXNlcnZtIiwiJHJvdXRlUGFyYW1zIiwibWVtYmVycyIsInNob3dNZW1iZXJFcnJvciIsInNob3dNZW1iZXJFcnJvck1zZyIsImVycm9yIiwiY2hlY2tSb3V0ZXMiLCJjbGlja2VkTWVtYmVyTmFtZSIsImVyciIsInYiLCJzaW5nbGVNZW1iZXIiLCJtZW1lYnJJZCIsInNpbmdsZU1lbWJlckxvYWRpbmdFcnJvck1zZyIsInNpbmdsZU1lbWJlckxvYWRpbmdFcnJvciIsImxvYWRVc2VyUHJvZmlsZSIsIm1lbWJlciIsInByb2ZpbGVMb2FkaW5nRXJyb3IiLCJtZW1iZXJQcm9maWxlIiwicHJvZmlsZSIsInByb2ZpbGVMb2FkaW5nRXJyb3JNc2ciLCJsb2FkVXNlckJyYW5jaCIsImJyYW5jaExvYWRpbmdFcnJvciIsImJyYW5jaExvYWRpbmdFcnJvck1zZyIsImxvYWRCYW5rVGVsbGVyIiwiYmFua1RlbGxlckxvYWRpbmdFcnJvck1zZyIsImJhbmtUZWxsZXJMb2FkaW5nRXJyb3IiLCJicmFuY2giLCJtZW1iZXJiYW5rVGVsbGVyIiwiYmFua1RlbGxlciIsInVzZXJjb250cm9sbEN0cmwiLCJzZW5kQ29udGFjdE1lc3NhZ2UiLCJtZXNzYWdlIiwic3lzdGVtU2VydmljZSIsImRpcmVjdGl2ZSIsInNpdGVOYXYiLCJyZXN0cmljdCIsIm5hdkN0cmwiLCIkbG9jYXRpb24iLCJudm0iLCJsb2dnZWRJbk5hbWUiLCJjdXJyZW50QWNjb3VudFR5cGUiLCJsb2dnZWRJblVyaSIsImxvZ291dCIsInBhdGgiLCJzaXRlRm9vdGVyIiwiZmlsZU1vZGVsIiwibGluayIsInNjb3BlIiwiJGVsZW1lbnQiLCJwYXJzZWRGaWxlU2V0dGVyIiwiJHBhcnNlIiwiYXR0cnMiLCJhc3NpZ24iLCJvbiIsIiRhcHBseSIsImZpbGVzIiwic2lkZUJhciIsImNvbW1pdHRlZXNDdHJsIiwiY3ZtIiwibG9hZENvbW1pdHRlZSIsImNvbW1pdHRlZUxvYWRpbmdFcnJvciIsImNvbW1pdHRlZXMiLCJjb21taXR0ZWUiLCJjb21taXR0ZWVMb2FkaW5nRXJyb3JNc2ciLCJldm0iLCJzaG93RXZlbnRzIiwiZXZlbnRMb2FkRXJyb3IiLCJldmVudHMiLCJldmVudExvYWRFcnJvck1zZyIsIm5vRXZlbnQiLCJsZW5ndGgiLCJldmVudHNDdHJsIiwiYWJvdXR1c0N0cmwiLCJjb250YWN0dXNDdHJsIiwiY29udGFjdCIsInRoaXMiLCJlbWFpbCIsImNvbnRhY3RVcyIsInNlbmRNZXNzYWdlRXJyb3JNc2ciLCJzZW5kTWVzc2FnZVN1Y2Nlc3MiLCJzZW5kTWVzc2FnZVN1Y2Nlc3NNc2ciLCJzZW5kTWVzc2FnZUVycm9yIiwic2lnbnVwQ3RybCIsInJlZ3ZtIiwibGFzdE5hbWUiLCJkaXNwbGF5TmFtZSIsInBhc3N3b3JkIiwiY29uZmlybVBhc3N3b3JkIiwicmVnaXN0ZXIiLCJSZWdpc3RyYXRpb25FcnJvck1zZyIsIlJlZ2lzdHJhdGlvbkVycm9yIiwic2lnbmluQ3RybCIsImx2bSIsImxvZ2luRXJyb3JNc2ciLCJsb2dpbkVycm9yIiwiZG9Mb2dpbiIsInByb3ZtIiwiJHNjb3BlIiwiJHJvdXRlIiwic3RhdHVzVXBkYXRlciIsInVwZGF0ZU9iamVjdCIsImJhc2ljQWNjb3VudEluZm9FcnJvciIsImJhc2ljQWNjb3VudEluZm9FcnJvck1zZyIsInJlbG9hZCIsInN0YXR1c1VwZGF0ZUVycm9yIiwiY29kZVJlYWR5IiwicHJvZmlsZVN0YXR1cyIsImFjdGl2YXRpb25Db2RlRXJyb3JNc2ciLCJzZW5kQWN0aXZhdGlvbkNvZGUiLCJ1cGRhdGVkU3RhdHVzIiwidXBkYXRlX2F0Iiwic3RhdHVzIiwiYWN0aXZhdGlvbkNvZGVFcnJvciIsInN0YXR1c0xvYWRFcnJvciIsInN0YXR1c0xvYWRFcnJvck1zZyIsImJhc2ljUHJvZmlsZSIsInVzZXJTdGF0dXNlcyIsInN0YXR1c2VzIiwid2hvcyIsInRlbGUiLCJhZGRyZXNzIiwidXBkYXRlZCIsImJyYW5jaEluZm9FcnJvck1zZyIsImJyYW5jaEluZm9FcnJvciIsInVzZXJCYXNpY0luZm9Mb2FkaW5nRXJyb3IiLCJ1c2VyQmFzaWNJbmZvTG9hZGluZ0Vycm9yTXNnIiwidXNlckluZm9Mb2FkaW5nRXJyb3IiLCJ1c2VySW5mb0xvYWRpbmdFcnJvck1zZyIsImxvYWRCYXNpY0luZm8iLCJiYXNpY0luZm8iLCJ1c2VySW5mbyIsIkFjdGl2YXRpb25FcnJvciIsInNldFRpbWVvdXQiLCJicmFuY2hJbmZvIiwiYWRkaXRpb25hbF9jb21taXR0ZWUiLCJhY3RpdmF0aW9uIiwiY29uc29sZSIsImFjdGl2ZVByb2ZpbGUiLCJzYXZlVGVsbGVyRXJyb3JNc2ciLCJiYW5rVGVsbGVySW5mbyIsInNhdmVUZWxsZXJFcnJvciIsIkFjdGl2YXRpb25FcnJvck1zZyIsInByZWZlcnJlZENvbW1pdHRlZSIsInRlbGxlckRvYyIsImxvZyIsImRvY0xvY2F0aW9uIiwiZ2V0Q3VycmVudEJhbmtUZWxsZXIiLCJ1c2VyQmFua1RlbGxlciIsInByb2ZpbGVDdHJsIiwid2VsY29tZUN0cmwiLCJzaXRlY29udHJvbGxDdHJsIiwiYWRTaXRlIiwiYWRkQ29tbWl0dGVlRXJyb3IiLCJhZGRDb21taXR0ZWVTdWNjZXNzTXNnIiwiYWRkQ29tbWl0dGVlRXJyb3JNc2ciLCJzaG93Q29tbWl0dGVlIiwiY29tbWl0dGVlTGlzdCIsImNvbW1pdHRlZUVycm9yTXNnIiwiY29tbWl0dGVlRXJyb3IiLCJyZW1vdmVMaXN0IiwiYWxlcnQiLCJldmVudEVuZHMiLCJldmVudFRpdGxlIiwiZXZlbnREZXRhaWxzIiwiZXZlbnRBZGRFcnJvciIsInNob3dFdmVudEVycm9yIiwic2hvd0V2ZW50RXJyb3JNc2ciLCJldmVudEFkZEVycm9yTXNnIl0sIm1hcHBpbmdzIjoiQUFRQSxjQUVBLFdBQ0lBLFFBQ0tDLE9BQU8sVUFBVyxhQUFjLFVBQVcscUJBR2hEQyxRQUFTQSxpQkFBVCxvQkFHWUMsU0FBQUEsRUFBYUMsR0FDYkMsRUFDQUMsS0FBQUEsS0FFRUgsWUFBQSxpQ0FDRkEsV0FBYSxjQUVYRyxhQUFXLFFBRWJELEtBQUFBLG1CQUNBQyxZQUFjLDRDQUdkSCxLQUFBQSxXQUNBRSxZQUFZLDBCQUNaQyxXQUFjLGFBRVpBLGFBQVksVUFFZEQsS0FBQUEsV0FDQUMsWUFBYywwQkFFWkQsV0FBUyxhQUNYRixhQUFhLFFBRWJHLEtBQUFBLFlBRUVILFlBQUEsNEJBQ0ZBLFdBQWEsY0FDYkUsYUFBWSxVQUdmRSxLQUFLLFNBQ0ZKLFlBQWEsc0JBQ2JFLFdBQVksV0FDWkMsYUFBYyxRQUdkSCxLQUFBQSxpQkFDQUUsWUFBWSw0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Qm5OLEVBQVNOLEtBQUt3RCxPQUVwQ2xELEVBQVNOLEtBQUtELFNBQ25Cd0wsV0FBVyxXQUNQbUIsRUFBT3BLLGFBQ1IsT0FHVnJCLE1BQU0sU0FBQTBDLEdBQ0hnSSxRQUFRUSxJQUFJeEksT0FNeEI2QixFQUFVTSxLQUFLLFlBSW5CTixFQUFVTSxLQUFLLFdBcEt2QmhJLFFBQ0tDLE9BQU8sVUFHWjBPLFdBQUFBLG1CQUE0QkEsR0FFNUJBLEVBQVNBLFNBQWlCck0saUJBQWdCb0YsWUFBVzVDLGtCQVJ6RCIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IHNldHRpbmcgdXAgZW50cnkgcG9pbnQgZm9yIGFuZ3VsYXIgZnJvbnQtZW5kXG58IEBhdXRob3I6IGphaGlkIGhhcXVlIDxqYWhpZC5oYXF1ZUB5YWhvby5jb20+XG58IEBjb3B5cmlnaHQ6IG5iYS1zbHAsIDIwMTdcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnLCBbJ25nUmVzb3VyY2UnLCAnbmdSb3V0ZScsICc3MjBrYi5kYXRlcGlja2VyJ10pXG4gICAgICAgIC5jb25maWcoWyckcm91dGVQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlcicsIGNvbmZpZ10pO1xuXG4gICAgZnVuY3Rpb24gY29uZmlnKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xuICAgICAgICAkcm91dGVQcm92aWRlclxuICAgICAgICAgICAgLndoZW4oJy8nLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdob21lL3dlbGNvbWUvd2VsY29tZS52aWV3Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd3ZWxjb21lQ3RybCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnd3ZtJyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL2NvdW5jaWxtZW1iZXJzJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY291bmNpbG1lbWJlcnMvY291bmNpbG1lbWJlcnMudmlldy5odG1sJyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL3NpZ251cCcsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NpZ251cC9zaWdudXAudmlldy5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2lnbnVwQ3RybCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAncmVndm0nLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvc2lnbmluJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2lnbmluL3NpZ25pbi52aWV3Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzaWduaW5DdHJsJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdsdm0nLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvcHJvZmlsZScsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Byb2ZpbGUvcHJvZmlsZS52aWV3Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwcm9maWxlQ3RybCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAncHJvdm0nLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvaGVscCcsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2hlbHAvaGVscC52aWV3Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdoZWxwQ3RybCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnaHZtJyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL3NpdGVjb250cm9sbCcsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FkbWluL3NpdGVjb250cm9sbC9zaXRlY29udHJvbGwudmlldy5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2l0ZWNvbnRyb2xsQ3RybCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnYWRTaXRlJyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL3VzZXJjb250cm9sbCcsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FkbWluL3VzZXJjb250cm9sbC91c2VyY29udHJvbGwudmlldy5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAndXNlcmNvbnRyb2xsQ3RybCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndXNlcnZtJyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL3dlbGNvbWUnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd3ZWxjb21lL3dlbGNvbWUudmlldy5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnd2VsY29tZUN0cmwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3d2bScsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9jb21taXR0ZWVzJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tbWl0dGVlcy9jb21taXR0ZWVzLnZpZXcuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2NvbW1pdHRlZXNDdHJsJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdjdm0nLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvZXZlbnRzJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnZXZlbnRzL2V2ZW50cy52aWV3Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdldmVudHNDdHJsJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdldm0nLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvYWJvdXR1cycsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2Fib3V0dXMvYWJvdXR1cy52aWV3Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdhYm91dHVzQ3RybCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnYWJ2bScsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9jb250YWN0dXMnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb250YWN0dXMvY29udGFjdHVzLnZpZXcuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2NvbnRhY3R1c0N0cmwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2N2bScsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUoe1xuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfVxufSkoKTtcbiIsIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIGF1dGhlbnRpY2F0aW9uIHNlcnZpY2UgXG58IEBhdXRob3I6IGphaGlkIGhhcXVlIDxqYWhpZC5oYXF1ZUB5YWhvby5jb20+XG58IEBjb3B5cmlnaHQ6IG5iYS1zbHAsIDIwMTdcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgIC5zZXJ2aWNlKCdhdXRoZW50aWNhdGlvbicsIGF1dGhlbnRpY2F0aW9uKTtcblxuYXV0aGVudGljYXRpb24uJGluamVjdCA9IFsnJHdpbmRvdycsICckaHR0cCddO1xuXG5mdW5jdGlvbiBhdXRoZW50aWNhdGlvbigkd2luZG93LCAkaHR0cCkge1xuLy8gc2F2aW5nIHRva2VuLlxuICAgIGNvbnN0IHNhdmVUb2tlbiA9XHRmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2VbJ25iYXNscCddID0gdG9rZW47XG4gICAgfTtcblxuICAgIGNvbnN0IGdldFRva2VuID1cdGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICR3aW5kb3cubG9jYWxTdG9yYWdlWyduYmFzbHAnXTtcbiAgICB9O1xuXG4gICAgY29uc3QgaXNMb2dnZWRJbiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBnZXRUb2tlbigpO1xuICAgICAgICBsZXQgcGF5bG9hZDtcblxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIHBheWxvYWQgPSB0b2tlbi5zcGxpdCgnLicpWzFdO1xuICAgICAgICAgICAgcGF5bG9hZCA9ICR3aW5kb3cuYXRvYihwYXlsb2FkKTtcbiAgICAgICAgICAgIHBheWxvYWQgPSBKU09OLnBhcnNlKHBheWxvYWQpO1xuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgY3VycmVudFVzZXIgPSAoKSA9PiB7XG4gICAgICAgIGlmIChpc0xvZ2dlZEluKSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IGdldFRva2VuKCk7XG4gICAgICAgICAgICBsZXQgcGF5bG9hZCA9IHRva2VuLnNwbGl0KCcuJylbMV07XG4gICAgICAgICAgICBwYXlsb2FkID0gJHdpbmRvdy5hdG9iKHBheWxvYWQpO1xuICAgICAgICAgICAgcGF5bG9hZCA9IEpTT04ucGFyc2UocGF5bG9hZCk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXNlcklkOiBwYXlsb2FkLl9pZCxcbiAgICAgICAgICAgICAgICBlbWFpbDogcGF5bG9hZC5lbWFpbCxcbiAgICAgICAgICAgICAgICBhY2NvdW50U3RhdHVzOiBwYXlsb2FkLmFjY291bnRTdGF0dXMsXG4gICAgICAgICAgICAgICAgYWNjb3VudFR5cGU6IHBheWxvYWQuYWNjb3VudFR5cGUsXG4gICAgICAgICAgICAgICAgYWNjb3VudElkOiBwYXlsb2FkLnVzZXJJZCxcbiAgICAgICAgICAgICAgICBuYW1lOiBwYXlsb2FkLm5hbWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IExvZ291dCA9ICgpID0+IHtcbiAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnbmJhc2xwJyk7XG4gICAgfTtcblxuICAgIGNvbnN0IHNpZ25VcCA9ICh1c2VyKSA9PiB7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3NpZ251cCcsIHVzZXIpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHNhdmVUb2tlbihkYXRhLnRva2VuKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHNpZ25JbiA9ICh1c2VyKSA9PiB7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3NpZ25pbicsIHVzZXIpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHNhdmVUb2tlbihkYXRhLnRva2VuKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZVN1Y2Nlc3MgPSAocmVzcG9uc2UpID0+IHJlc3BvbnNlO1xuXG4gICAgY29uc3QgaGFuZGxlRXJyb3IgPSAocmVzcG9uc2UpID0+IHJlc3BvbnNlO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyLFxuICAgICAgICBzYXZlVG9rZW46IHNhdmVUb2tlbixcbiAgICAgICAgZ2V0VG9rZW46IGdldFRva2VuLFxuICAgICAgICBpc0xvZ2dlZEluOiBpc0xvZ2dlZEluLFxuICAgICAgICBzaWduVXA6IHNpZ25VcCxcbiAgICAgICAgc2lnbkluOiBzaWduSW4sXG4gICAgICAgIExvZ291dDogTG9nb3V0LFxuICAgIH07XG59XG5cbiIsIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIGFjY291bnQgc2VydmljZSBmb3IgYXBwXG58IEBhdXRob3I6IGphaGlkIGhhcXVlIDxqYWhpZC5oYXF1ZUB5YWhvby5jb20+XG58IEBjb3B5cmlnaHQ6IG5iYS1zbHAsIDIwMTdcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuc2VydmljZSgnYWNjb3VudCcsIGFjY291bnQpO1xuXG4gICAgYWNjb3VudC4kaW5qZWN0ID0gWyckd2luZG93JywgJyRodHRwJ107XG5cbiAgICBmdW5jdGlvbiBhY2NvdW50KCR3aW5kb3csICRodHRwKSB7XG5cbiAgICAgICAgY29uc3QgY3JlYXRlQWN0aXZhdGlvbkNvZGUgPSAodXNlcklkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAgXG4gICAgICAgICAgICAgICAgLnBvc3QoJy9hcGkvJyArIHVzZXJJZCArICcvZ2VuZXJhdGV2YWxpZGF0aW9uY29kZScpXG4gICAgICAgICAgICAgICAgLnRoZW4oaGFuZGxlU3VjY2VzcylcbiAgICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHZhbGlkYXRlQWN0aXZhdGlvbkNvZGUgPSAodXNlcklkLCBjb2RlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAgXG4gICAgICAgICAgICAgICAgLnBvc3QoJy9hcGkvJyArIHVzZXJJZCArICcvJyArIGNvZGUgKyAnL3ZhbGlkYXRlJylcbiAgICAgICAgICAgICAgICAudGhlbihoYW5kbGVTdWNjZXNzKVxuICAgICAgICAgICAgICAgIC5jYXRjaChoYW5kbGVFcnJvcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZ2V0QWNjb3VudFN0YXR1c2VzID0gKHVzZXJJZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwIFxuICAgICAgICAgICAgICAgIC5nZXQoJy9hcGkvJyArIHVzZXJJZCArICcvc3RhdHVzZXMnKVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBnZXRDb21taXR0ZWUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAgICAgICAuZ2V0KCcvYXBpL3Nob3djb21taXR0ZWUnKVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB1cGRhdGVVc2VyU3RhdHVzID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cFxuICAgICAgICAgICAgICAgIC5wb3N0KCcvYXBpL3VzZXJzdGF0dXMnLCBkYXRhKVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBzYXZlQmFzaWNJbmZvID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cCBcbiAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS9jcmVhdGViYXNpY3Byb2ZpbGUnLCBkYXRhKVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBzYXZlQnJhbmNoSW5mbyA9ICh1c2VySWQsIGRhdGEpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cFxuICAgICAgICAgICAgICAgIC5wb3N0KCcvYXBpLycgKyB1c2VySWQgKyAnL3NhdmVicmFuY2hpbmZvJywgZGF0YSlcbiAgICAgICAgICAgICAgICAudGhlbihoYW5kbGVTdWNjZXNzKVxuICAgICAgICAgICAgICAgIC5jYXRjaChoYW5kbGVFcnJvcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgdXBsb2FkVGVsbGVyRG9jcyA9IChmaWxlLCB1c2VySWQpID0+IHtcbiAgICAgICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICAgICAgZmQuYXBwZW5kKCd0ZWxsZXJEb2MnLCBmaWxlKTtcblxuICAgICAgICAgICAgcmV0dXJuICRodHRwXG4gICAgICAgICAgICAgICAgLnBvc3QoJy9hcGkvZG9jdXBsb2FkLycgKyB1c2VySWQsIGZkLCB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGFuZ3VsYXIuaWRlbnRpdHksXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZCB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihoYW5kbGVTdWNjZXNzKVxuICAgICAgICAgICAgICAgIC5jYXRjaChoYW5kbGVFcnJvcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgc2F2ZUJhbmtUZWxsZXIgPSAodGVsbGVyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS9zYXZlYmFua3RlbGxlcicsIHRlbGxlcilcbiAgICAgICAgICAgICAgICAudGhlbihoYW5kbGVTdWNjZXNzKVxuICAgICAgICAgICAgICAgIC5jYXRjaChoYW5kbGVFcnJvcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZ2V0QmFua1RlbGxlciA9ICh1c2VySWQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cCBcbiAgICAgICAgICAgICAgICAuZ2V0KCcvYXBpLycgKyB1c2VySWQgKyAnL2Jhbmt0ZWxsZXInKVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKlxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8IEZvbGxvd2luZyBmdW5jdGlvbiB3aWxsIGxvYWQgYWxsIGRhdGEgZm9yIHVzZXJcbiAgICAgICAgfCBiYXNlZCBvbiBnaXZlbiB1c2VyRW1haWwgYW5kIGNvbGxlY3Rpb24gbmFtZVxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAqL1xuICAgICAgICBjb25zdCBsb2FkVXNlckluZm8gPSAoY29sbGVjdGlvbk5hbWUsIHVzZXJJZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwIFxuICAgICAgICAgICAgICAgIC5nZXQoJy9hcGkvJyArIHVzZXJJZCArICcvJyArIGNvbGxlY3Rpb25OYW1lICsgJy91c2VyaW5mbycpXG4gICAgICAgICAgICAgICAgLnRoZW4oaGFuZGxlU3VjY2VzcylcbiAgICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZVN1Y2Nlc3MgPSAocmVzcG9uc2UpID0+IHJlc3BvbnNlO1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZUVycm9yID0gKHJlc3BvbnNlKSA9PiByZXNwb25zZTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXBsb2FkVGVsbGVyRG9jczogdXBsb2FkVGVsbGVyRG9jcyxcbiAgICAgICAgICAgIGNyZWF0ZUFjdGl2YXRpb25Db2RlOiBjcmVhdGVBY3RpdmF0aW9uQ29kZSxcbiAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZhdGlvbkNvZGU6IHZhbGlkYXRlQWN0aXZhdGlvbkNvZGUsXG4gICAgICAgICAgICBnZXRBY2NvdW50U3RhdHVzZXM6IGdldEFjY291bnRTdGF0dXNlcyxcbiAgICAgICAgICAgIHVwZGF0ZVVzZXJTdGF0dXM6IHVwZGF0ZVVzZXJTdGF0dXMsXG4gICAgICAgICAgICBzYXZlQmFzaWNJbmZvOiBzYXZlQmFzaWNJbmZvLFxuICAgICAgICAgICAgc2F2ZUJyYW5jaEluZm86IHNhdmVCcmFuY2hJbmZvLFxuICAgICAgICAgICAgbG9hZFVzZXJJbmZvOiBsb2FkVXNlckluZm8sXG4gICAgICAgICAgICBnZXRDb21taXR0ZWU6IGdldENvbW1pdHRlZSxcbiAgICAgICAgICAgIHNhdmVCYW5rVGVsbGVyOiBzYXZlQmFua1RlbGxlcixcbiAgICAgICAgICAgIGdldEJhbmtUZWxsZXI6IGdldEJhbmtUZWxsZXIsXG4gICAgICAgIH07XG4gICAgfVxuXG59KSgpO1xuIiwiLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IHNldHRpbmcgdXAgc2VydmljZSBmb3Igc2l0ZS1jb250cm9sbGVyIGZvciBhZG1pblxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuYmEtc2xwLCAyMDE4XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuc2VydmljZSgnc2l0ZWNvbnRyb2xsZXInLCBzaXRlY29udHJvbGxlcik7XG5cbiAgICBzaXRlY29udHJvbGxlci4kaW5qZWN0ID0gWyckaHR0cCddO1xuXG4gICAgZnVuY3Rpb24gc2l0ZWNvbnRyb2xsZXIoJGh0dHApIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGFkZFByZWZlcnJlZENvbW1pdHRlZSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS9jcmVhdGVjb21taXR0ZWUnLCBkYXRhKVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBzaG93QWxsQ29tbWl0dGVlID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwXG4gICAgICAgICAgICAgICAgLmdldCgnL2FwaS9zaG93Y29tbWl0dGVlJylcbiAgICAgICAgICAgICAgICAudGhlbihoYW5kbGVTdWNjZXNzKVxuICAgICAgICAgICAgICAgIC5jYXRjaChoYW5kbGVFcnJvcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVtb3ZlQ29tbWl0dGVlID0gKGNvbW1pdHRlZUlkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAgXG4gICAgICAgICAgICAgICAgLmRlbGV0ZSgnL2FwaS8nICsgY29tbWl0dGVlSWQgKyAnL3JlbW92ZWNvbW1pdHRlZScpXG4gICAgICAgICAgICAgICAgLnRoZW4oaGFuZGxlU3VjY2VzcylcbiAgICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGFkZEV2ZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAgXG4gICAgICAgICAgICAgICAgLnBvc3QoJy9hcGkvZXZlbnQnLCBldmVudClcbiAgICAgICAgICAgICAgICAudGhlbihoYW5kbGVTdWNjZXNzKVxuICAgICAgICAgICAgICAgIC5jYXRjaChoYW5kbGVFcnJvcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgc2hvd0V2ZW50ID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwXG4gICAgICAgICAgICAgICAgLmdldCgnL2FwaS9zaG93RXZlbnQnKVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZW1vdmVFdmVudCA9IChldmVudElkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAgICAgICAuZGVsZXRlKCcvYXBpLycgKyBldmVudElkICsgJy9ldmVudCcpXG4gICAgICAgICAgICAgICAgLnRoZW4oaGFuZGxlU3VjY2VzcylcbiAgICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZVN1Y2Nlc3MgPSAocmVzcG9uc2UpID0+IHJlc3BvbnNlO1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZUVycm9yID0gKHJlc3BvbnNlKSA9PiByZXNwb25zZTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWRkUHJlZmVycmVkQ29tbWl0dGVlOiBhZGRQcmVmZXJyZWRDb21taXR0ZWUsXG4gICAgICAgICAgICBzaG93QWxsQ29tbWl0dGVlOiBzaG93QWxsQ29tbWl0dGVlLFxuICAgICAgICAgICAgcmVtb3ZlQ29tbWl0dGVlOiByZW1vdmVDb21taXR0ZWUsXG4gICAgICAgICAgICBhZGRFdmVudDogYWRkRXZlbnQsXG4gICAgICAgICAgICBzaG93RXZlbnQ6IHNob3dFdmVudCxcbiAgICAgICAgICAgIHJlbW92ZUV2ZW50OiByZW1vdmVFdmVudCxcbiAgICAgICAgfTtcblxuICAgIH1cblxufSkoKTtcbiIsIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIHVzZXIgY29udHJvbGxlciBzZXJ2aWNlXG58IEBhdXRob3I6IGphaGlkIGhhcXVlIDxqYWhpZC5oYXF1ZUB5YWhvby5jb20+XG58IEBjb3B5cmlnaHQ6IG5iYS1zbHAsIDIwMThcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuc2VydmljZSgndXNlcmNvbnRyb2xsZXInLCB1c2VyY29udHJvbGxlcik7XG5cbiAgICB1c2VyY29udHJvbGxlci4kaW5qZWN0ID0gWyckaHR0cCddO1xuXG4gICAgZnVuY3Rpb24gdXNlcmNvbnRyb2xsZXIoJGh0dHApIHtcblxuXG4gICAgICAgIGNvbnN0IHNob3dNZW1iZXJzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwXG4gICAgICAgICAgICAgICAgLmdldCgnL2FwaS9tZW1iZXJzJylcbiAgICAgICAgICAgICAgICAudGhlbihoYW5kbGVTdWNjZXNzKVxuICAgICAgICAgICAgICAgIC5jYXRjaChoYW5kbGVFcnJvcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgc2hvd1NpbmdsZU1lbWJlciA9IChtZW1iZXJJZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwIFxuICAgICAgICAgICAgICAgIC5nZXQoJy9hcGkvJyArIG1lbWJlcklkICsgJy9tZW1iZXInKVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBzaG93TWVtYmVyUHJvZmlsZSA9IChtZW1iZXJJZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwIFxuICAgICAgICAgICAgICAgIC5nZXQoJy9hcGkvJyArIG1lbWJlcklkICsgJy9wcm9maWxlJylcbiAgICAgICAgICAgICAgICAudGhlbihoYW5kbGVTdWNjZXNzKVxuICAgICAgICAgICAgICAgIC5jYXRjaChoYW5kbGVFcnJvcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgc2hvd01lbWJlckJyYW5jaCA9IChtZW1iZXJJZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwIFxuICAgICAgICAgICAgICAgIC5nZXQoJy9hcGkvJyArIG1lbWJlcklkICsgJy9icmFuY2gnKVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIGNvbnN0IGhhbmRsZVN1Y2Nlc3MgPSAocmVzcG9uc2UpID0+IHJlc3BvbnNlO1xuXG4gICAgICAgIGNvbnN0IGhhbmRsZUVycm9yID0gKHJlc3BvbnNlKSA9PiByZXNwb25zZTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2hvd01lbWJlcnM6IHNob3dNZW1iZXJzLFxuICAgICAgICAgICAgc2hvd1NpbmdsZU1lbWJlcjogc2hvd1NpbmdsZU1lbWJlcixcbiAgICAgICAgICAgIHNob3dNZW1iZXJQcm9maWxlOiBzaG93TWVtYmVyUHJvZmlsZSxcbiAgICAgICAgICAgIHNob3dNZW1iZXJCcmFuY2g6IHNob3dNZW1iZXJCcmFuY2gsXG4gICAgICAgIH07XG4gICAgfVxuXG59KSgpOyIsIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIHVzZXIgY29udHJvbGxlciBmb3IgdGhlIGFwcFxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuYmEtc2xwLCAyMDE4XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuY29udHJvbGxlcigndXNlcmNvbnRyb2xsQ3RybCcsIHVzZXJjb250cm9sbEN0cmwpO1xuXG4gICAgdXNlcmNvbnRyb2xsQ3RybC4kaW5qZWN0ID0gWyd1c2VyY29udHJvbGxlcicsICdhY2NvdW50JywgJyRyb3V0ZVBhcmFtcyddO1xuXG4gICAgZnVuY3Rpb24gdXNlcmNvbnRyb2xsQ3RybCh1c2VyY29udHJvbGxlciwgYWNjb3VudCwgJHJvdXRlUGFyYW1zKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB1c2Vydm0gPSB0aGlzO1xuXG4gICAgICAgIHVzZXJjb250cm9sbGVyXG4gICAgICAgICAgICAuc2hvd01lbWJlcnMoKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJ2bS5zaG93TWVtYmVyRXJyb3IgPSB0cnVlOyBcbiAgICAgICAgICAgICAgICAgICAgdXNlcnZtLnNob3dNZW1iZXJFcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcnZtLm1lbWJlcnMgPSByZXNwb25zZS5kYXRhLm1lbWJlcnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgIHVzZXJ2bS5zaG93TWVtYmVyRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHVzZXJ2bS5zaG93TWVtYmVyRXJyb3JNc2cgPSBlcnI7XG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vIGluaXRpYWwgZnVuY3Rpb24gdG8gY2hlY2sgd2hldGhlciB1c2VyIGNsaWNrZWQgYW55IG1lbWJlciBuYW1lXG4gICAgICAgIHVzZXJ2bS5jaGVja1JvdXRlcyA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICgkcm91dGVQYXJhbXMudikge1xuICAgICAgICAgICAgICAgIHVzZXJ2bS5jbGlja2VkTWVtYmVyTmFtZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1c2Vydm0uY2xpY2tlZE1lbWJlck5hbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHwgRm9sbG93aW5nIGZ1bmN0aW9uIHdpbGwgZ2V0IGluZGl2aWR1YWwgbWVtYmVyJ3NcbiAgICAgICAgfCBkZXRhaWxzXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICovXG4gICAgICAgIHVzZXJ2bS5sb2FkVXNlckluZm8gPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtZW1lYnJJZCA9ICRyb3V0ZVBhcmFtcy52O1xuXG4gICAgICAgICAgICB1c2VyY29udHJvbGxlclxuICAgICAgICAgICAgICAgIC5zaG93U2luZ2xlTWVtYmVyKG1lbWVicklkKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJ2bS5zaW5nbGVNZW1iZXJMb2FkaW5nRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnZtLnNpbmdsZU1lbWJlckxvYWRpbmdFcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2Vydm0uc2luZ2xlTWVtYmVyTG9hZGluZ0Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2Vydm0uc2luZ2xlTWVtYmVyID0gcmVzcG9uc2UuZGF0YS5tZW1iZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICB1c2Vydm0uc2luZ2xlTWVtYmVyTG9hZGluZ0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdXNlcnZtLnNpbmdsZU1lbWJlckxvYWRpbmdFcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB1c2Vydm0ubG9hZFVzZXJQcm9maWxlID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbWVtZWJySWQgPSAkcm91dGVQYXJhbXMudjtcblxuICAgICAgICAgICAgdXNlcmNvbnRyb2xsZXJcbiAgICAgICAgICAgICAgICAuc2hvd01lbWJlclByb2ZpbGUobWVtZWJySWQpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnZtLnByb2ZpbGVMb2FkaW5nRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnZtLnByb2ZpbGVMb2FkaW5nRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnZtLnByb2ZpbGVMb2FkaW5nRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJ2bS5tZW1iZXJQcm9maWxlID0gcmVzcG9uc2UuZGF0YS5wcm9maWxlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcnZtLnByb2ZpbGVMb2FkaW5nRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB1c2Vydm0ucHJvZmlsZUxvYWRpbmdFcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB1c2Vydm0ubG9hZFVzZXJCcmFuY2ggPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtZW1lYnJJZCA9ICRyb3V0ZVBhcmFtcy52O1xuXG4gICAgICAgICAgICB1c2VyY29udHJvbGxlclxuICAgICAgICAgICAgICAgIC5zaG93TWVtYmVyQnJhbmNoKG1lbWVicklkKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJ2bS5icmFuY2hMb2FkaW5nRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnZtLmJyYW5jaExvYWRpbmdFcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2Vydm0uYnJhbmNoTG9hZGluZ0Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2Vydm0ubWVtYmVyQnJhbmNoID0gcmVzcG9uc2UuZGF0YS5icmFuY2g7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICB1c2Vydm0uYnJhbmNoTG9hZGluZ0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdXNlcnZtLmJyYW5jaExvYWRpbmdFcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB1c2Vydm0ubG9hZEJhbmtUZWxsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtZW1lYnJJZCA9ICRyb3V0ZVBhcmFtcy52O1xuXG4gICAgICAgICAgICBhY2NvdW50XG4gICAgICAgICAgICAgICAgLmdldEJhbmtUZWxsZXIobWVtZWJySWQpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnZtLmJhbmtUZWxsZXJMb2FkaW5nRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnZtLmJhbmtUZWxsZXJMb2FkaW5nRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnZtLmJhbmtUZWxsZXJMb2FkaW5nRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJ2bS5tZW1iZXJiYW5rVGVsbGVyID0gcmVzcG9uc2UuZGF0YS5iYW5rVGVsbGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcnZtLmJhbmtUZWxsZXJMb2FkaW5nRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB1c2Vydm0uYmFua1RlbGxlckxvYWRpbmdFcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cblxufSkoKTsiLCIvKlxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnwgc2V0dGluZyB1cCBzeXN0ZW0gc2VydmljZSBmb3IgdGhlIGFwcFxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuYWItc2xwLCAyMDE4XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuc2VydmljZSgnc3lzdGVtU2VydmljZScsIHN5c3RlbVNlcnZpY2UpO1xuICAgICAgICBcbiAgICBzeXN0ZW1TZXJ2aWNlLiRpbmplY3QgPSBbJyRodHRwJ107XG5cbiAgICBmdW5jdGlvbiBzeXN0ZW1TZXJ2aWNlKCRodHRwKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzZW5kQ29udGFjdE1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwXG4gICAgICAgICAgICAgICAgLnBvc3QoJy9hcGkvc2VuZG1lc3NhZ2UnLCBtZXNzYWdlKVxuICAgICAgICAgICAgICAgIC50aGVuKGhhbmRsZVN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBoYW5kbGVTdWNjZXNzID0gKHJlc3BvbnNlKSA9PiByZXNwb25zZTtcblxuICAgICAgICBjb25zdCBoYW5kbGVFcnJvciA9IChyZXNwb25zZSkgPT4gcmVzcG9uc2U7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlbmRDb250YWN0TWVzc2FnZTogc2VuZENvbnRhY3RNZXNzYWdlLFxuICAgICAgICB9O1xuICAgIH1cblxufSkoKTsiLCIvKlxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnwgc2V0dGluZyB1cCBuYXZpZ2F0aW9uIGRpcmVjdGl2ZSBmb3IgdGhlIGFwcFxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuYmFzbHAsIDIwMTdcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuZGlyZWN0aXZlKCdzaXRlTmF2Jywgc2l0ZU5hdik7XG5cbiAgICBmdW5jdGlvbiBzaXRlTmF2KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbW1vbi9kaXJlY3RpdmVzL25hdi9zaXRlLW5hdi50ZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICduYXZDdHJsIGFzIG52bScsXG4gICAgICAgIH07XG4gICAgfVxufSkoKTtcbiIsIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIGNvbnRyb2xsZXIgZm9yIG5hdmlnYXRpb25cbnwgQGF1dGhvcjogamFoaWQgaGFxdWUgPGphaGlkLmhhcXVlQHlhaG9vLmNvbT5cbnwgQGNvcHlyaWdodDogbmJhc2xwLCAyMDE3XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbmJhc2xwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ25hdkN0cmwnLCBuYXZDdHJsKTtcblxuICAgIG5hdkN0cmwuJGluamVjdCA9IFsnYXV0aGVudGljYXRpb24nLCAnJGxvY2F0aW9uJ107XG5cbiAgICBmdW5jdGlvbiBuYXZDdHJsKGF1dGhlbnRpY2F0aW9uLCAkbG9jYXRpb24pIHtcbiAgICAgICAgY29uc3QgbnZtID0gdGhpcztcblxuICAgICAgICBpZiAoYXV0aGVudGljYXRpb24uaXNMb2dnZWRJbigpKSB7XG4gICAgICAgICAgICBudm0ubG9nZ2VkSW5VcmkgPSB0cnVlO1xuICAgICAgICAgICAgbnZtLmxvZ2dlZEluTmFtZSA9IGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkubmFtZTtcbiAgICAgICAgICAgIG52bS5jdXJyZW50QWNjb3VudFR5cGUgPSBhdXRoZW50aWNhdGlvbi5jdXJyZW50VXNlcigpLmFjY291bnRUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbnZtLmxvZ2dlZEluVXJpID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBudm0ubG9nb3V0ID0gKCkgPT4ge1xuICAgICAgICAgICAgYXV0aGVudGljYXRpb24uTG9nb3V0KCk7XG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3NpZ25pbicpO1xuICAgICAgICB9O1xuICAgIH1cbn0pKCk7XG4iLCIvKlxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnwgc2V0dGluZyB1cCBmb290ZXIgZGlyZWN0aXZlIGZvciBhcHBsaWNhdGlvblxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuYmFzbHAsIDIwMTdcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuZGlyZWN0aXZlKCdzaXRlRm9vdGVyJywgc2l0ZUZvb3Rlcik7XG4gICAgZnVuY3Rpb24gc2l0ZUZvb3RlcigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21tb24vZGlyZWN0aXZlcy9mb290ZXIvZm9vdGVyLnRlbXBsYXRlLmh0bWwnLFxuICAgICAgICB9O1xuICAgIH1cbn0pKCk7XG4iLCIvKlxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnwgc2V0dGluZyB1cCBmaWxlIHVwbG9hZCBkaXJlY3RpdmVcbnwgQGF1dGhvcjogamFoaWQgaGFxdWUgPGphaGlkLmhhcXVlQHlhaG9vLmNvbT5cbnwgQGNvcHlyaWdodDogbmNsaGFsYWwsIDIwMTdcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuKGZ1bmN0aW9uKCl7XG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCduYmFzbHAnKVxuXHRcdC5kaXJlY3RpdmUoJ2ZpbGVNb2RlbCcsIGZpbGVNb2RlbCk7XG5cblx0ZmlsZU1vZGVsLiRpbmplY3QgPSBbJyRwYXJzZSddO1xuXG5cdGZ1bmN0aW9uIGZpbGVNb2RlbCgkcGFyc2Upe1xuXHRcdHJldHVybiB7XG4gICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgdmFyIHBhcnNlZEZpbGUgPSAkcGFyc2UoYXR0cnMuZmlsZU1vZGVsKTtcbiAgICAgICAgICAgIHZhciBwYXJzZWRGaWxlU2V0dGVyID0gcGFyc2VkRmlsZS5hc3NpZ247XG4gICAgICAgICAgICAkZWxlbWVudC5vbignY2hhbmdlJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgcGFyc2VkRmlsZVNldHRlcihzY29wZSwgJGVsZW1lbnRbMF0uZmlsZXNbMF0pO1xuICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgIH0sXG4gICAgfTtcblx0fVxufSkoKTtcbiIsIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIHNpZGViYXIgZGlyZWN0aXZlIGZvciB0aGUgYXBwXG58IEBhdXRob3I6IGphaGlkIGhhcXVlIDxqYWhpZC5oYXF1ZUB5YWhvby5jb20+XG58IEBjb3B5cmlnaHQ6IG5iYS1zbHAsIDIwMThcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuZGlyZWN0aXZlKCdzaWRlQmFyJywgc2lkZUJhcik7XG5cbiAgICBmdW5jdGlvbiBzaWRlQmFyKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbW1vbi9kaXJlY3RpdmVzL3NpZGViYXIvc2lkZWJhci50ZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgfTtcbiAgICB9XG59KSgpOyIsIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIGNvbnRyb2xsZXIgZm9yIHdlbGNvbWUgcGFnZVxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuYmFzbHAsIDIwMTdcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgYW5ndWxhciBcbiAgICAgICAgLm1vZHVsZSgnbmJhc2xwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3dlbGNvbWVDdHJsJywgd2VsY29tZUN0cmwpO1xuXG4gICAgd2VsY29tZUN0cmwuJGluamVjdCA9IFsnYXV0aGVudGljYXRpb24nLCAnJGxvY2F0aW9uJ107XG5cbiAgICBmdW5jdGlvbiB3ZWxjb21lQ3RybChhdXRoZW50aWNhdGlvbiwgJGxvY2F0aW9uKSB7XG4gICAgICAgIGNvbnN0IHd2bSA9IHRoaXM7XG4gICAgfVxuXG59KSgpO1xuIiwiLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IHNldHRpbmcgdXAgY29tbWl0dGVlcyBmb3IgdGhlIGFwcFxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuYmEtc2xwLCAyMDE4XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuY29udHJvbGxlcignY29tbWl0dGVlc0N0cmwnLCBjb21taXR0ZWVzQ3RybCk7XG5cbiAgICBjb21taXR0ZWVzQ3RybC4kaW5qZWN0ID0gWydzaXRlY29udHJvbGxlciddO1xuXG4gICAgZnVuY3Rpb24gY29tbWl0dGVlc0N0cmwoc2l0ZWNvbnRyb2xsZXIpIHtcbiAgICAgICAgY29uc3QgY3ZtID0gdGhpcztcblxuICAgICAgICBjdm0ubG9hZENvbW1pdHRlZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHNpdGVjb250cm9sbGVyXG4gICAgICAgICAgICAgICAgLnNob3dBbGxDb21taXR0ZWUoKVx0XG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3ZtLmNvbW1pdHRlZUxvYWRpbmdFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdm0uY29tbWl0dGVlTG9hZGluZ0Vycm9yTXNnID0gcmVzcG9uc2UuZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN2bS5jb21taXR0ZWVMb2FkaW5nRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN2bS5jb21taXR0ZWVzID0gcmVzcG9uc2UuZGF0YS5jb21taXR0ZWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjdm0uY29tbWl0dGVlTG9hZGluZ0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY3ZtLmNvbW1pdHRlZUxvYWRpbmdFcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxufSkoKTsiLCIvKlxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnwgc2V0dGluZyB1cCBldmVudCBjb250cm9sbGVyIGZvciB0aGUgYXBwXG58IEBhdXRob3I6IGphaGlkIGhhcXVlIDxqYWhpZC5oYXF1ZUB5YWhvby5jb20+XG58IEBjb3B5cmlnaHQ6IG5iYS1zbHAsIDIwMThcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuY29udHJvbGxlcignZXZlbnRzQ3RybCcsIGV2ZW50c0N0cmwpO1xuXG4gICAgZXZlbnRzQ3RybC4kaW5qZWN0ID0gWydzaXRlY29udHJvbGxlciddO1xuXG4gICAgZnVuY3Rpb24gZXZlbnRzQ3RybChzaXRlY29udHJvbGxlcikge1xuXG4gICAgICAgIGNvbnN0IGV2bSA9IHRoaXM7XG5cbiAgICAgICAgZXZtLnNob3dFdmVudHMgPSAoKSA9PiB7XG4gICAgICAgICAgICBzaXRlY29udHJvbGxlclxuICAgICAgICAgICAgICAgIC5zaG93RXZlbnQoKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2bS5ldmVudExvYWRFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBldm0uZXZlbnRMb2FkRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZtLmV2ZW50TG9hZEVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBldm0uZXZlbnRzID0gcmVzcG9uc2UuZGF0YS5ldmVudHM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldm0uZXZlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldm0ubm9FdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZtLm5vRXZlbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXZtLmV2ZW50TG9hZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZXZtLmV2ZW50TG9hZEVycm9yTXNnID0gZXJyO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cblxufSkoKTsiLCIvKlxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnwgc2V0dGluZyB1cCBhYm91dCB1cyBjb250cm9sbGVyIGZvciBhcHBcbnwgQGF1dGhvcjogamFoaWQgaGFxdWUgPGphaGlkLmhhcXVlQHlhaG9vLmNvbT5cbnwgQGNvcHlyaWdodDogbmJhLXNscCwgMjAxOFxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5cbid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ25iYXNscCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdhYm91dHVzQ3RybCcsIGFib3V0dXNDdHJsKTtcblxuICAgIGZ1bmN0aW9uIGFib3V0dXNDdHJsKCkge1xuICAgICAgICBjb25zdCBhYnZtID0gdGhpcztcbiAgICB9XG4gXG59KSgpOyIsIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIGNvbnRhY3QgY29udHJvbGxlciBmb3IgdGhlIGFwcFxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuYmEtc2xwLCAyMDE4XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIFxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbmJhc2xwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ2NvbnRhY3R1c0N0cmwnLCBjb250YWN0dXNDdHJsKTtcblxuICAgIGNvbnRhY3R1c0N0cmwuJGluamVjdCA9IFsnc3lzdGVtU2VydmljZSddO1xuXG4gICAgZnVuY3Rpb24gY29udGFjdHVzQ3RybChzeXN0ZW1TZXJ2aWNlKSB7XG4gICAgICAgIGNvbnN0IGN2bSA9IHRoaXM7XG5cbiAgICAgICAgY3ZtLmNvbnRhY3QgPSB7XG4gICAgICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgICAgIGVtYWlsOiAnJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICcnLFxuICAgICAgICB9O1xuXG4gICAgICAgIGN2bS5jb250YWN0VXMgPSAoKSA9PiB7XG4gICAgICAgICAgICBzeXN0ZW1TZXJ2aWNlXG4gICAgICAgICAgICAgICAgLnNlbmRDb250YWN0TWVzc2FnZShjdm0uY29udGFjdClcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdm0uc2VuZE1lc3NhZ2VFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdm0uc2VuZE1lc3NhZ2VFcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdm0uc2VuZE1lc3NhZ2VTdWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN2bS5zZW5kTWVzc2FnZVN1Y2Nlc3NNc2cgPSAnV2UgaGF2ZSByZWNlaXZlZCB5b3VyIG1lc3NhZ2UuIFdlIHdpbGwgYmUgaW4gdG91Y2ggd2l0aCB5b3Ugc29vbic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjdm0uc2VuZE1lc3NhZ2VFcnJvciA9IHRydWU7XHRcbiAgICAgICAgICAgICAgICAgICAgY3ZtLnNlbmRNZXNzYWdlRXJyb3JNc2cgPSBlcnI7XHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbn0pKCk7IiwiLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IHNldHRpbmcgdXAgc2lnbnVwIGNvbnRyb2xsZXIgZm9yIHRoZSBhcHBcbnwgQGF1dGhvcjogamFoaWQgaGFxdWUgPGphaGlkLmhhcXVlQHlhaG9vLmNvbT5cbnwgQGNvcHlyaWdodDogbmJhc2xwLCAyMDE3XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbmJhc2xwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3NpZ251cEN0cmwnLCBzaWdudXBDdHJsKTtcblxuICAgIHNpZ251cEN0cmwuJGluamVjdCA9IFsnYXV0aGVudGljYXRpb24nLCAnJGxvY2F0aW9uJ107XG5cbiAgICBmdW5jdGlvbiBzaWdudXBDdHJsKGF1dGhlbnRpY2F0aW9uLCAkbG9jYXRpb24pIHtcbiAgICAgICAgY29uc3QgcmVndm0gPSB0aGlzO1xuXG4gICAgICAgIC8vIHVzZXIgb2JqZWN0LlxuICAgICAgICByZWd2bS51c2VyID0ge1xuICAgICAgICAgICAgZmlyc3ROYW1lOiAnJyxcbiAgICAgICAgICAgIGxhc3ROYW1lOiAnJyxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnJyxcbiAgICAgICAgICAgIGVtYWlsOiAnJyxcbiAgICAgICAgICAgIHBhc3N3b3JkOiAnJyxcbiAgICAgICAgICAgIGNvbmZpcm1QYXNzd29yZDogJycsXG4gICAgICAgIH07XG5cbiAgICAgICAgcmVndm0ucmVnaXN0ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICBhdXRoZW50aWNhdGlvblxuICAgICAgICAgICAgICAgIC5zaWduVXAocmVndm0udXNlcilcbiAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ3ZtLlJlZ2lzdHJhdGlvbkVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ3ZtLlJlZ2lzdHJhdGlvbkVycm9yTXNnID0gcmVzcG9uc2UuZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ3ZtLlJlZ2lzdHJhdGlvbkVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3dlbGNvbWUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVndm0uUmVnaXN0cmF0aW9uRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVndm0uUmVnaXN0cmF0aW9uRXJyb3JNc2cgPSBlcnIuZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChhdXRoZW50aWNhdGlvbi5pc0xvZ2dlZEluKCkpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvd2VsY29tZScpO1xuICAgICAgICB9XG4gICAgfVxufSkoKTtcbiIsIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIGNvbnRyb2xsZXIgZm9yIGxvZ2luIHBhZ2VcbnwgQGF1dGhvcjogamFoaWQgaGFxdWUgPGphaGlkLmhhcXVlQHlhaG9vLmNvbT5cbnwgQGNvcHlyaWdodDogbmJhc2xwLCAyMDE3XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbmJhc2xwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3NpZ25pbkN0cmwnLCBzaWduaW5DdHJsKTtcblxuICAgIHNpZ25pbkN0cmwuJGluamVjdCA9IFsnYXV0aGVudGljYXRpb24nLCAnJGxvY2F0aW9uJ107XG5cbiAgICBmdW5jdGlvbiBzaWduaW5DdHJsKGF1dGhlbnRpY2F0aW9uLCAkbG9jYXRpb24pIHtcbiAgICAgICAgY29uc3QgbHZtID0gdGhpcztcblxuICAgICAgICBsdm0udXNlciA9IHtcbiAgICAgICAgICAgIGVtYWlsOiAnJyxcbiAgICAgICAgICAgIHBhc3N3b3JkOiAnJyxcbiAgICAgICAgfTsgXG5cbiAgICAgICAgaWYgKGF1dGhlbnRpY2F0aW9uLmlzTG9nZ2VkSW4oKSkge1xuICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy93ZWxjb21lJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsdm0ubG9naW4gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFsdm0udXNlci5lbWFpbCB8fCAhbHZtLnVzZXIucGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgbHZtLmxvZ2luRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBsdm0ubG9naW5FcnJvck1zZyA9IGBFcnJvciEgYWxsICogZmllbGRzIGFyZSByZXF1aXJlZGA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsdm0ubG9naW5FcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsdm0uZG9Mb2dpbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGx2bS5kb0xvZ2luID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgIC5zaWduSW4obHZtLnVzZXIpXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcigoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsdm0ubG9naW5FcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsdm0ubG9naW5FcnJvck1zZyA9IGVyci5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy93ZWxjb21lJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxufSkoKTtcbiIsIi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBzZXR0aW5nIHVwIGNvbnRyb2xsZXIgZm9yIHByb2ZpbGUgcGFnZVxufCBAYXV0aG9yOiBqYWhpZCBoYXF1ZSA8amFoaWQuaGFxdWVAeWFob28uY29tPlxufCBAY29weXJpZ2h0OiBuYmEtc2xwLCAyMDE3XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduYmFzbHAnKVxuICAgICAgICAuY29udHJvbGxlcigncHJvZmlsZUN0cmwnLCBwcm9maWxlQ3RybCk7XG5cbiAgICBwcm9maWxlQ3RybC4kaW5qZWN0ID0gWyckc2NvcGUnLCAnYXV0aGVudGljYXRpb24nLCAnJGxvY2F0aW9uJywgJ2FjY291bnQnLCAnJHJvdXRlJ107XG5cbiAgICBmdW5jdGlvbiBwcm9maWxlQ3RybCgkc2NvcGUsIGF1dGhlbnRpY2F0aW9uLCAkbG9jYXRpb24sIGFjY291bnQsICRyb3V0ZSkge1xuXG4gICAgICAgIGNvbnN0IHByb3ZtID0gdGhpcztcblxuICAgICAgICBmdW5jdGlvbiBzdGF0dXNVcGRhdGVyKHVwZGF0ZU9iamVjdCkge1xuXG4gICAgICAgICAgICAvLyBjYWxsaW5nIHNlcnZpY2UgZnVuY3Rpb24uXG4gICAgICAgICAgICBhY2NvdW50XG4gICAgICAgICAgICAgICAgLnVwZGF0ZVVzZXJTdGF0dXModXBkYXRlT2JqZWN0KVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEudXBkYXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uc3RhdHVzVXBkYXRlRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb3V0ZS5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJhc2ljQWNjb3VudEluZm9FcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5iYXNpY0FjY291bnRJbmZvRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdm0uc3RhdHVzVXBkYXRlRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBwcm92bS5iYXNpY0FjY291bnRJbmZvRXJyb3JNc2cgPSBlcnI7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXV0aGVudGljYXRpb24uaXNMb2dnZWRJbigpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgcHJvdm0uY3VycmVudEFjY291bnRUeXBlID0gYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5hY2NvdW50VHlwZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gY2hlY2tpbmcgYWNjb3VudCB0eXBlXG4gICAgICAgICAgICBpZiAoYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5hY2NvdW50VHlwZSA9PT0gJ2N1c3RvbWVyJykge1xuXG4gICAgICAgICAgICAgICAgcHJvdm0ucHJvZmlsZVN0YXR1cyA9IGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuYWNjb3VudFN0YXR1cztcblxuICAgICAgICAgICAgICAgIHByb3ZtLmNvZGVSZWFkeSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHByb3ZtLnNlbmRBY3RpdmF0aW9uQ29kZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdm0uY29kZVJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgLmNyZWF0ZUFjdGl2YXRpb25Db2RlKGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuZW1haWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uYWN0aXZhdGlvbkNvZGVFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmFjdGl2YXRpb25Db2RlRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9hdDogJ3Byb2ZpbGVBY3RpdmF0aW9uTWFpbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzVXBkYXRlcih1cGRhdGVkU3RhdHVzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5jb2RlUmVhZHkgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5hY3RpdmF0aW9uQ29kZUVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmFjdGl2YXRpb25Db2RlRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmFjdGl2YXRpb25Db2RlRXJyb3JNc2cgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gZ2V0IHVzZXIgYWNjb3VudCBzdGF0dWVzIFxuICAgICAgICAgICAgICAgIHByb3ZtLmdldFByb2ZpbGVTdGF0dXNlcyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldEFjY291bnRTdGF0dXNlcyhhdXRoZW50aWNhdGlvbi5jdXJyZW50VXNlcigpLmVtYWlsKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnN0YXR1c0xvYWRFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnN0YXR1c0xvYWRFcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5zdGF0dXNMb2FkRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0udXNlclN0YXR1c2VzID0gcmVzcG9uc2UuZGF0YS5zdGF0dXNlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uc3RhdHVzTG9hZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5zdGF0dXNMb2FkRXJyb3JNc2cgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gc2F2aW5nIGJhc2ljIHByb2ZpbGUgaW5mb1xuICAgICAgICAgICAgICAgIHByb3ZtLmJhc2ljUHJvZmlsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgd2hvczogYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgdXNlcklkOiBhdXRoZW50aWNhdGlvbi5jdXJyZW50VXNlcigpLnVzZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWVyTmFtZTogJycsXG4gICAgICAgICAgICAgICAgICAgIHNleDogJycsXG4gICAgICAgICAgICAgICAgICAgIHRlbGU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiAnJyxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcHJvdm0uc2F2ZUJhc2ljSW5mbyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNhdmVCYXNpY0luZm8ocHJvdm0uYmFzaWNQcm9maWxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uYmFzaWNBY2NvdW50SW5mb0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uYmFzaWNBY2NvdW50SW5mb0Vycm9yTXNnID0gcmVzcG9uc2UuZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkU3RhdHVzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2F0OiAnYmFzaWNfaW5mbycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsaW5nIHNlcnZpY2UgZnVuY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC51cGRhdGVVc2VyU3RhdHVzKHVwZGF0ZWRTdGF0dXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEudXBkYXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5zdGF0dXNVcGRhdGVFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm91dGUucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5iYXNpY0FjY291bnRJbmZvRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5iYXNpY0FjY291bnRJbmZvRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5zdGF0dXNVcGRhdGVFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uYmFzaWNBY2NvdW50SW5mb0Vycm9yTXNnID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBwcm92bS5icmFuY2ggPSB7XG4gICAgICAgICAgICAgICAgICAgIHllYXI6ICcnLFxuICAgICAgICAgICAgICAgICAgICBicmFuY2g6ICcnLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBhZGRpbmcgYnJhbmNoIGluZm9cbiAgICAgICAgICAgICAgICBwcm92bS5zYXZlQmF0Y2hJbmZvID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICAuc2F2ZUJyYW5jaEluZm8oYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5lbWFpbCwgcHJvdm0uYnJhbmNoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJyYW5jaEluZm9FcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJyYW5jaEluZm9FcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5icmFuY2hJbmZvRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRTdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVfYXQ6ICdicmFuY2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGluZyBzZXJ2aWNlIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlVXNlclN0YXR1cyh1cGRhdGVkU3RhdHVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnVwZGF0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uYnJhbmNoSW5mb0Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3V0ZS5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJyYW5jaEluZm9FcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJyYW5jaEluZm9FcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJyYW5jaEluZm9FcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uYnJhbmNoSW5mb0Vycm9yTXNnID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJyYW5jaEluZm9FcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uYnJhbmNoSW5mb0Vycm9yTXNnID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vIHNob3cgYmFzaWMgaW5mb1xuICAgICAgICAgICAgICAgIHByb3ZtLmxvYWRCYXNpY0luZm8gPSAoY29sbGVjdGlvbk5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgLmxvYWRVc2VySW5mbyhjb2xsZWN0aW9uTmFtZSwgYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5lbWFpbClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS51c2VyQmFzaWNJbmZvTG9hZGluZ0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0udXNlckJhc2ljSW5mb0xvYWRpbmdFcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS51c2VyQmFzaWNJbmZvTG9hZGluZ0Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJhc2ljSW5mbyA9IHJlc3BvbnNlLmRhdGEudXNlckluZm87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnVzZXJCYXNpY0luZm9Mb2FkaW5nRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnVzZXJCYXNpY0luZm9Mb2FkaW5nRXJyb3JNc2cgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcHJvdm0uZ2V0Q29tbWl0dGVlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Q29tbWl0dGVlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5jb21taXR0ZWVzID0gcmVzcG9uc2UuZGF0YS5jb21taXR0ZWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBzaG93IGJyYW5jaCBpbmZvXG4gICAgICAgICAgICAgICAgcHJvdm0ubG9hZFVzZXJCcmFuY2ggPSAoY29sbGVjdGlvbk5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgLmxvYWRVc2VySW5mbyhjb2xsZWN0aW9uTmFtZSwgYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5lbWFpbClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS51c2VySW5mb0xvYWRpbmdFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnVzZXJJbmZvTG9hZGluZ0Vycm9yTXNnID0gcmVzcG9uc2UuZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnVzZXJJbmZvTG9hZGluZ0Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJyYW5jaEluZm8gPSByZXNwb25zZS5kYXRhLnVzZXJJbmZvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS51c2VySW5mb0xvYWRpbmdFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0udXNlckluZm9Mb2FkaW5nRXJyb3JNc2cgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgICAgIHwgZm9sbG93aW5nIGZ1bmN0aW9uIHdpbGwgYWN0aXZlIHRoZSBwcm9maWxlIFxuICAgICAgICAgICAgICAgIHwgYmFzZWQgb24gZ2l2ZW4gY29kZVxuICAgICAgICAgICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBwcm92bS5hY3RpdmF0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiAnJyxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcHJvdm0uYWN0aXZlUHJvZmlsZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgLnZhbGlkYXRlQWN0aXZhdGlvbkNvZGUoYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5lbWFpbCwgcHJvdm0uYWN0aXZhdGlvbi5jb2RlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLkFjdGl2YXRpb25FcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLkFjdGl2YXRpb25FcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5hY3RpdmF0aW9uU3VjY2VzcyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGluZyB0aGUgbG9nb3V0IGZ1bmN0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uLkxvZ291dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvdXRlLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAzMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uQWN0aXZhdGlvbkVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5BY3RpdmF0aW9uRXJyb3JNc2cgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgICAgIHwgRm9sbG93aW5nIGZ1bmN0aW9uIHdpbGwgaGFuZGxlIGJhbmsgdGVsbGVyIFxuICAgICAgICAgICAgICAgIHwgdXBsb2FkXG4gICAgICAgICAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHByb3ZtLmJhbmtUZWxsZXJJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICBwcmVmZXJyZWRDb21taXR0ZWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsX2NvbW1pdHRlZTogJycsXG4gICAgICAgICAgICAgICAgICAgIHdob3M6IGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZDogYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5hY2NvdW50SWQsXG4gICAgICAgICAgICAgICAgICAgIHRlbGxlckRvYzogJHNjb3BlLnRlbGxlckRvYyxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcHJvdm0uc2F2ZUJhbmtUZWxsZXJJbmZvID0gKCkgPT4geyAgIFxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJvdm0uYmFua1RlbGxlckluZm8ucHJlZmVycmVkQ29tbWl0dGVlIHx8ICFwcm92bS5iYW5rVGVsbGVySW5mby5hZGRpdGlvbmFsX2NvbW1pdHRlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uc2F2ZVRlbGxlckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVUZWxsZXJFcnJvck1zZyA9ICdBbGwgKiBmaWVuZHMgYXJlIHJlcXVpcmVkLiBNdXN0IG5vdCBiZSBlbXB0eSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHByb3ZtLmJhbmtUZWxsZXJJbmZvKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC51cGxvYWRUZWxsZXJEb2NzKCRzY29wZS50ZWxsZXJEb2MsIGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuYWNjb3VudElkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3VjY2VzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVUZWxsZXJFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5zYXZlVGVsbGVyRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuc3VjY2VzcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uYmFua1RlbGxlckluZm8udGVsbGVyRG9jID0gcmVzcG9uc2UuZGF0YS5kb2NMb2NhdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zYXZlQmFua1RlbGxlcihwcm92bS5iYW5rVGVsbGVySW5mbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5zYXZlVGVsbGVyRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0uc2F2ZVRlbGxlckVycm9yTXNnID0gcmVzcG9uc2UuZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRTdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlX2F0OiAnYmFua3RlbGxlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGF1dGhlbnRpY2F0aW9uLmN1cnJlbnRVc2VyKCkuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1VwZGF0ZXIodXBkYXRlZFN0YXR1cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3V0ZS5yZWxvYWQoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVUZWxsZXJFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVUZWxsZXJFcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVUZWxsZXJFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLnNhdmVUZWxsZXJFcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgfCBGb2xsb3dpbmcgZnVuY3Rpb24gd2lsbCBnZXQgbGF0ZXN0IGJhbmsgdGVsbGVyXG4gICAgICAgICAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHByb3ZtLmdldEN1cnJlbnRCYW5rVGVsbGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0QmFua1RlbGxlcihhdXRoZW50aWNhdGlvbi5jdXJyZW50VXNlcigpLmVtYWlsKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJhbmtUZWxsZXJMb2FkaW5nRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92bS5iYW5rVGVsbGVyTG9hZGluZ0Vycm9yTXNnID0gcmVzcG9uc2UuZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJhbmtUZWxsZXJMb2FkaW5nRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdm0udXNlckJhbmtUZWxsZXIgPSByZXNwb25zZS5kYXRhLmJhbmtUZWxsZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJhbmtUZWxsZXJMb2FkaW5nRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZtLmJhbmtUZWxsZXJMb2FkaW5nRXJyb3JNc2cgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhdXRoZW50aWNhdGlvbi5jdXJyZW50VXNlcigpLmFjY291bnRUeXBlID09PSAnYWRtaW4nKSB7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvc2lnbmluJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7XG4iLCIvKlxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnwgc2V0dGluZyB1cCBjb250cm9sbGVyIGZvciBzaXRlLWNvbnRyb2xsIHBhZ2VcbnwgQGF1dGhvcjogamFoaWQgaGFxdWUgPGphaGlkLmhhcXVlQHlhaG9vLmNvbT5cbnwgQGNvcHlyaWdodDogbmJhLXNscCwgMjAxOFxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5cbid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnbmJhc2xwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3NpdGVjb250cm9sbEN0cmwnLCBzaXRlY29udHJvbGxDdHJsKTtcblxuICAgIHNpdGVjb250cm9sbEN0cmwuJGluamVjdCA9IFsnYXV0aGVudGljYXRpb24nLCAnJGxvY2F0aW9uJywgJ3NpdGVjb250cm9sbGVyJ107XG5cbiAgICBmdW5jdGlvbiBzaXRlY29udHJvbGxDdHJsKGF1dGhlbnRpY2F0aW9uLCAkbG9jYXRpb24sIHNpdGVjb250cm9sbGVyKSB7XG4gICAgICAgIGNvbnN0IGFkU2l0ZSA9IHRoaXM7XG5cbiAgICAgICBcbiAgICAgICAgaWYgKGF1dGhlbnRpY2F0aW9uLmlzTG9nZ2VkSW4oKSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoYXV0aGVudGljYXRpb24uY3VycmVudFVzZXIoKS5hY2NvdW50VHlwZSA9PT0gJ2FkbWluJykge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGFkU2l0ZS5jb21taXR0ZWUgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBjb3VuY2lsTWVtYmVyOiAnJyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8vIGFkZCBjb21taXR0ZWVcbiAgICAgICAgICAgICAgICBhZFNpdGUuYWRkUHJlZmVycmVkQ29tbWl0dGVlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzaXRlY29udHJvbGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFByZWZlcnJlZENvbW1pdHRlZShhZFNpdGUuY29tbWl0dGVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkU2l0ZS5hZGRDb21taXR0ZWVFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkU2l0ZS5hZGRDb21taXR0ZWVFcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuYWRkQ29tbWl0dGVlRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLmFkZENvbW1pdHRlZVN1Y2Nlc3NNc2cgPSAnQ29tbWl0dGVlIHN1Y2Nlc3NmdWxseSBhZGRlZCc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRpbWUgb3V0IGFuZCBjYWxsIHNob3cgY29tbWl0dGVlIG1ldGhvZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuc2hvd0NvbW1pdHRlZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuYWRkQ29tbWl0dGVlRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkU2l0ZS5hZGRDb21taXR0ZWVFcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBzaG93IGNvbW1pdHRlZVxuICAgICAgICAgICAgICAgIGFkU2l0ZS5zaG93Q29tbWl0dGVlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzaXRlY29udHJvbGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNob3dBbGxDb21taXR0ZWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkU2l0ZS5jb21taXR0ZWVFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkU2l0ZS5jb21taXR0ZWVFcnJvck1zZyA9IHJlc3BvbnNlLmRhdGEuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuY29tbWl0dGVlRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLmNvbW1pdHRlZUxpc3QgPSByZXNwb25zZS5kYXRhLmNvbW1pdHRlZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLmNvbW1pdHRlZUVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuY29tbWl0dGVlRXJyb3JNc2cgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGluZGl2aWR1YWwgY29tbWl0dGVlLlxuICAgICAgICAgICAgICAgIGFkU2l0ZS5yZW1vdmVMaXN0ID0gKGNvbW1pdHRlZUlkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNpdGVjb250cm9sbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ29tbWl0dGVlKGNvbW1pdHRlZUlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KHJlc3BvbnNlLmRhdGEuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuc2hvd0NvbW1pdHRlZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgICAgICB8IGZvbGxvd2luZyBmdW5jdGlvbiB3aWxsIGFkZCBuZXcgZXZlbnQgaW50byB0aGVcbiAgICAgICAgICAgICAgICB8IGRhdGFiYXNlLlxuICAgICAgICAgICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBhZFNpdGUuZXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50VGl0bGU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBldmVudERldGFpbHM6ICcnLFxuICAgICAgICAgICAgICAgICAgICBldmVudFN0YXJ0czogJycsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50RW5kczogJycsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGFkU2l0ZS5hZGRFdmVudCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHNpdGVjb250cm9sbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkRXZlbnQoYWRTaXRlLmV2ZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkU2l0ZS5ldmVudEFkZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLmV2ZW50QWRkRXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLmV2ZW50QWRkRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLmV2ZW50QWRkU3VjY2VzcyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRpbWUgb3V0IGFuZCBjYWxsIHNob3cgY29tbWl0dGVlIG1ldGhvZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuc2hvd0V2ZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkU2l0ZS5ldmVudEFkZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuZXZlbnRBZGRFcnJvck1zZyA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBhZFNpdGUuc2hvd0V2ZW50ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzaXRlY29udHJvbGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgLnNob3dFdmVudCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLnNob3dFdmVudEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLnNob3dFdmVudEVycm9yTXNnID0gcmVzcG9uc2UuZGF0YS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkU2l0ZS5zaG93RXZlbnRFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuZXZlbnRzID0gcmVzcG9uc2UuZGF0YS5ldmVudHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkU2l0ZS5zaG93RXZlbnRFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXRlLnNob3dFdmVudEVycm9yTXNnID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGFkU2l0ZS5yZW1vdmVFdmVudCA9IChldmVudElkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNpdGVjb250cm9sbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlRXZlbnQoZXZlbnRJZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuc2hvd0V2ZW50RXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuc2hvd0V2ZW50RXJyb3JNc2cgPSByZXNwb25zZS5kYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXNwb25zZS5kYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFNpdGUuc2hvd0V2ZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3dlbGNvbWUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvc2lnbmluJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0pKCk7Il19
