"use strict";!function(){angular.module("nbaslp",["ngResource","ngRoute"]).config(["$routeProvider","$locationProvider",function(e,l){e.when("/",{templateUrl:"home/welcome/welcome.view.html",controller:"welcomeCtrl",controllerAs:"wvm"}).when("/signup",{templateUrl:"signup/signup.view.html",controller:"signupCtrl",controllerAs:"regvm"}).when("/signin",{templateUrl:"signin/signin.view.html",controller:"signinCtrl",controllerAs:"lvm"}).when("/profile",{templateUrl:"profile/profile.view.html",controller:"profileCtrl",controllerAs:"provm"}).when("/welcome",{templateUrl:"welcome/welcome.view.html",controller:"welcomeCtrl",controllerAs:"wvm"}),l.html5Mode({enabled:!0})}])}();
"use strict";function authentication(n,t){var e=function(t){n.localStorage.nbaslp=t},a=function(){return n.localStorage.nbaslp},o=function(){var t=a(),e=void 0;return!!t&&(e=t.split(".")[1],e=n.atob(e),e=JSON.parse(e))};return{currentUser:function(){if(o){var t=a().split(".")[1];return t=n.atob(t),t=JSON.parse(t),{userId:t._id,email:t.email,accountStatus:t.accountStatus,accountId:t.userId,name:t.name}}return!1},saveToken:e,getToken:a,isLoggedIn:o,signUp:function(n){return t.post("/api/signup",n).success(function(n){e(n.token)})},signIn:function(n){return t.post("/api/signin",n).success(function(n){e(n.token)})},Logout:function(){n.localStorage.removeItem("nbaslp")}}}angular.module("nbaslp").service("authentication",authentication),authentication.$inject=["$window","$http"];
"use strict";!function(){angular.module("nbaslp").directive("siteNav",function(){return{restrict:"EA",templateUrl:"common/directives/nav/site-nav.template.html",controller:"navCtrl as nvm"}})}();
"use strict";!function(){function n(n,t){n.isLoggedIn()?(this.loggedInUri=!0,this.loggedInName=n.currentUser().name):this.loggedInUri=!1,this.logout=function(){n.Logout(),t.path("/signin")}}angular.module("nbaslp").controller("navCtrl",n),n.$inject=["authentication","$location"]}();
"use strict";!function(){angular.module("nbaslp").directive("siteFooter",function(){return{restrict:"EA",templateUrl:"common/directives/footer/footer.template.html"}})}();
"use strict";!function(){angular.module("nbaslp").controller("welcomeCtrl",function(){})}();
"use strict";!function(){function r(r,t){var o=this;o.user={firstName:"",lastName:"",displayName:"",email:"",password:"",confirmPassword:""},o.register=function(){r.signUp(o.user).then(function(r){r.data.error?(o.RegistrationError=!0,o.RegistrationErrorMsg=r.data.error):(o.RegistrationError=!1,t.path("/welcome"))}).catch(function(r){r&&(o.RegistrationError=!0,o.RegistrationErrorMsg=r.data.error)})},r.isLoggedIn()&&t.path("/welcome")}angular.module("nbaslp").controller("signupCtrl",r),r.$inject=["authentication","$location"]}();
"use strict";!function(){function r(r,o){var n=this;n.user={email:"",password:""},r.isLoggedIn()?o.path("/welcome"):(n.login=function(){n.user.email&&n.user.password?(n.loginError=!1,n.doLogin()):(n.loginError=!0,n.loginErrorMsg="Error! all * fields are required")},n.doLogin=function(){r.signIn(n.user).error(function(r){n.loginError=!0,n.loginErrorMsg=r.error}).then(function(){o.path("/welcome")})})}angular.module("nbaslp").controller("signinCtrl",r),r.$inject=["authentication","$location"]}();
"use strict";!function(){function t(t,n){t.isLoggedIn()?this.profileStatus=t.currentUser().accountStatus:n.path("/signin")}angular.module("nbaslp").controller("profileCtrl",t),t.$inject=["authentication","$location"]}();
"use strict";!function(){function n(n,t){}angular.module("nbaslp").controller("welcomeCtrl",n),n.$inject=["authentication","$location"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
